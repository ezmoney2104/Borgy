// commontable
<template>
  <v-table class="custom-table">
    <thead>
      <tr>
        <th
          v-show="itemTable.TABLE_HEADER.length != 0"
          v-for="(column, columnIndex) in itemTable.TABLE_HEADER"
          :key="columnIndex"
          v-bind="column.directives"
          id="custom-header"
        >
          <common-label :item="column" class="text-h5 font-weight-bold"></common-label>
        </th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="(row, rowIndex) in rows?.length ? rows : [itemTable.TABLE_COLUMN]" :key="rowIndex">
        <td
          v-for="(cell, cellIndex) in row"
          :key="cellIndex"
          v-bind="cell.directives"
          id="custom-row"
        >
          <common-label
            :item="{
              ...cell,
              cellIndex: cellIndex,
              display: {
                label: displayColumnLabel(cell, cellIndex),
              },
            }"
          />
        </td>
      </tr>
    </tbody>
  </v-table>
</template>

<script>
import CommonLabel from './CommonLabel.vue'

export default {
  name: 'CommonTable',
  components: { CommonLabel },
  /**
   * @description
   * Receives data from different component
   * @object data:
   * - itemTable {Object} - table properties
   * @number data:
   * - plannedUnits {int} - incremented planned number of units
   * @number data:
   * - nonDefectiveProducts {int} - number of non-defective product of the last process
   */
  props: {
    itemTable: {
      type: Object,
      required: true,
    },
    rows: {
      type: Array,
    },
    firstColumn: {
      type: Object,
    },
    secondColumn: {
      type: Object,
    },
    thirdColumn: {
      type: Object,
    },
  },
  methods: {
    /**
     * Generates the column labels
     * @param {string} label - column value
     * @param {int} columnIndex - column index
     * @returns {string} column label
     */
    displayColumnLabel(label, columnIndex) {
      const columns = [this.firstColumn, this.secondColumn, this.thirdColumn]
      const column = columns[columnIndex]
      if (column && (column.value || column.value > 0)) {
        return `${column.value} ${column.symbol || ''}`
      }

      let newLabel = typeof label == 'object' ? label.display.label : label

      return newLabel
    },
  },
}
</script>

<style scoped>
.custom-table {
  width: 100%;
}
.custom-table th {
  border: 1px solid rgb(204, 204, 204);
  background-color: #2e2e2e;
  color: #ffffff;
}

.custom-table td {
  border: 1px solid rgb(204, 204, 204);
  background-color: #3a3a3a;
  color: #ffffff;
}

#custom-header {
  border-color: rgb(204, 204, 204);
  height: 2.6rem;
  text-align: center;
  font-weight: bolder;
}

#custom-row {
  border-color: rgb(204, 204, 204);
  height: 2.5rem;
  text-align: center;
  font-weight: bolder;
}
</style>

//ProcessInformationScreen.vue
<template>
  <v-container fluid>
    <v-row>
      <v-col
        ><ProcessChart
          :incremented-units="incremented_units"
          :non-defective-products="nonDefectiveProducts"
          :working-rate="working_rate"
          :operation_information="operation_table"
      /></v-col>
    </v-row>
  </v-container>
</template>

<script>
import ProcessChart from './ProcessInformationScreen/ProcessChart.vue'
import { FetchAPI } from '@/utility/apiRequest'

export default {
  name: 'ProcessInformationScreen',
  components: {
    ProcessChart,
  },
  data() {
    return {
      reference_CT: 0,
      operation_information: [],
      incremented_units: 0,
      incrementInterval: null,
      nonDefectiveProducts: 0,
      working_rate: 0,
      operation_table: [],
    }
  },
  async mounted() {
    await this.fetchAllOperations()
    await this.fetchReferenceCT()
  },
  methods: {
    /**
     * Retrieves all operation information
     */
    async fetchAllOperations() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-all-operations')
        this.operation_information = [...response.data]
        this.nonDefectiveProducts =
          this.operation_information[this.operation_information.length - 1].non_defective_products
        this.initializeIncrementer()
        this.getOperationTable()
      } catch (error) {
        console.log(error)
      }
    },

    /**
     * Retrieves the reference cycle time
     */
    async fetchReferenceCT() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-ref-cycle-time')

        if (response.success) {
          let ref_CT = response.data[0].reference_cycle_time * 1000
          this.reference_CT = ref_CT || 2000
          this.restartIncrementer()
        }
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Updates the planned number of units
     */
    async updatePlannedUnits() {
      try {
        const api = new FetchAPI()
        const lastOperation = this.operation_information[this.operation_information.length - 1]

        if (lastOperation) {
          const processId = lastOperation.process_id
          const payload = { planned_number_units: this.incremented_units }

          await api.put(`/api/update-units/${processId}`, payload)
        }
      } catch (error) {
        console.error('Failed to update planned number units:', error)
      }
    },
    /**
     * Assign the value of global variable incremented_units and initialize the increment function
     */
    initializeIncrementer() {
      if (this.operation_information.length > 0) {
        const lastItem = this.operation_information[this.operation_information.length - 1]
        this.incremented_units = lastItem.planned_number_units || 0

        this.startIncrementer()
      }
    },
    /**
     * Starts incrementing the planned units and work time rate
     */
    startIncrementer() {
      this.clearIncrementer()
      const condition = this.operation_information.length > 0 && this.reference_CT !== 0

      this.incrementInterval = setInterval(async () => {
        if (condition) {
          this.incremented_units += 1
        }
        await this.updatePlannedUnits()
        await this.calculateWorkingTime()
      }, this.reference_CT)
    },
    /**
     * Restart the startIncrementer()
     */
    restartIncrementer() {
      this.startIncrementer()
    },
    /**
     * Resets the interval value
     */
    clearIncrementer() {
      if (this.incrementInterval) {
        clearInterval(this.incrementInterval)
      }
    },
    /**
     * Calculate the working
     */
    async calculateWorkingTime() {
      this.working_rate = +((this.nonDefectiveProducts / this.incremented_units) * 100).toFixed(2)
    },
    /**
     * Function use for getting product number format
     * @returns {string} new formatted  product number
     */
    formatProductNumber(number) {
      const defaultFill = '0000'

      if (String(number).length === 5) {
        return '9999'
      }
      return (defaultFill + number).substr(-4)
    },

    /**
     * Maps through the operation_information array and creates new object
     */
    getOperationTable() {
      const operation_information = this.operation_information
      const operation_information_map = operation_information.map(
        (filObj) =>
          new Object({
            process_id: filObj.process_id,
            process_name: filObj.process_name,
            product_number: this.formatProductNumber(filObj.product_number),
            facility_cycle_time: filObj.facility_cycle_time.toFixed(2) + 's',
          }),
      )

      this.operation_table = operation_information_map
    },
  },
}
</script>

//OperationTable.vue
<template>
  <v-container fluid>
    <v-row><common-label :item="operationTableTitle" /></v-row>

    <v-row>
      <v-col class="ma-0 pa-0">
        <common-table
          :item-table="TABLE_PROPERTIES"
          :rows="operation_information.slice(0, 7)"
        ></common-table>
      </v-col>
      <v-col class="ma-0 pa-0" v-show="operation_information.length > 7">
        <common-table
          :item-table="TABLE_PROPERTIES"
          :rows="operation_information.slice(7)"
        ></common-table>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import CommonLabel from '@/components/common/CommonLabel.vue'
import CommonTable from '@/components/common/CommonTable.vue'
import { OPERATION_TABLE_LABEL } from '@/common/recipe/rLabels'
import { OPERATION_TABLE_PROPERTIES } from '@/common/recipe/rTables'
export default {
  name: 'OperationTable',
  components: {
    CommonLabel,
    CommonTable,
  },
  props: {
    operation_information: {
      type: Array,
    },
  },
  data() {
    return {
      operationTableTitle: OPERATION_TABLE_LABEL,
      TABLE_PROPERTIES: { ...OPERATION_TABLE_PROPERTIES },
    }
  },
}
</script>

//ProducitionLine.vue
<template>
  <v-container fluid>
    <v-row class="ProductLineHeader"><common-label :item="productionLineTitle" /></v-row>
    <v-row
      ><common-table
        :item-table="TABLE_PROPERTIES"
        :first-column="{ value: incrementedUnits, symbol: '台' }"
        :second-column="{ value: nonDefectiveProducts, symbol: '台' }"
        :third-column="{ value: workingRate, symbol: '%' }"
      ></common-table
    ></v-row>
  </v-container>
</template>

<script>
import { PRODUCTION_LINE_LABEL } from '@/common/recipe/rLabels'
import { PROUDUCT_LINE_TABLE } from '@/common/recipe/rTables'
import CommonLabel from '@/components/common/CommonLabel.vue'
import CommonTable from '@/components/common/CommonTable.vue'

export default {
  name: 'ProcessLine',
  components: {
    CommonLabel,
    CommonTable,
  },
  /**
   * @description
   * Recieves data from different components
   * @number data:
   * - incrementedUnits {int} - incremented planned number of units
   * @number data:
   * - nonDefectiveProducts {int} - number of non-defective product of the last process
   * @number data:
   * - workingRate {int} - number of working rate
   */
  props: {
    incrementedUnits: {
      type: Number,
      default: 0,
    },
    nonDefectiveProducts: {
      type: Number,
      default: 0,
    },
    workingRate: {
      type: Number,
      default: 0,
    },
  },
  data() {
    return {
      TABLE_PROPERTIES: { ...PROUDUCT_LINE_TABLE },
      productionLineTitle: PRODUCTION_LINE_LABEL,
    }
  },
}
</script>
<style scoped>
.ProductLineHeader {
  margin-bottom: 1rem;
}
</style>
