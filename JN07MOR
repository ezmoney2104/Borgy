import { shallowMount } from '@vue/test-utils'
import ProcessInformationScreen from '@/components/pages/ProcessInformationScreen.vue'
import FetchAPI from '@/utility/apiRequest'
import 'jest-canvas-mock'

jest.mock('@/utility/apiRequest', () => {
  return jest.fn().mockImplementation(() => ({
    get: jest.fn(() => Promise.resolve({ success: true, data: [] })),
    put: jest.fn(() => Promise.resolve({ success: true, message_content: 'Updated successfully' })),
  }))
})

jest.spyOn(console, 'error').mockImplementation(() => {
  return
})

window.console.log = jest.fn()
describe('Testing ProcessInformationScreen.vue', () => {
  const wrapper = shallowMount(ProcessInformationScreen, {
    global: {
      components: {
        VContainer: 'v-container',
        VCol: 'v-col',
        VRow: 'v-row',
      },
    },
    data() {
      return {
        reference_CT: 0,
        operationInformation: [],
        incremented_units: 0,
        incrementInterval: null,
      }
    },
  })

  it('should initialize data correctly', () => {
    expect(wrapper.vm.reference_CT).toBe(0)
    expect(wrapper.vm.operationInformation).toEqual([])
    expect(wrapper.vm.incremented_units).toBe(0)
    expect(wrapper.vm.incrementInterval).toBeNull()
  })

  it('starts the incrementer correctly', () => {
    jest.useFakeTimers()
    const mockOperation = { planned_number_units: 10 }
    wrapper.setData({ operationInformation: [mockOperation], reference_CT: 1000 })
    wrapper.vm.startIncrementer()
    jest.advanceTimersByTime(1000)
    expect(wrapper.vm.incremented_units).toBe(1)
    jest.clearAllTimers()
  })

  it('initializes incrementer correctly when there are operations', () => {
    const mockOperation = { planned_number_units: 10 }
    wrapper.setData({ operationInformation: [mockOperation] })
    wrapper.vm.initializeIncrementer()
    expect(wrapper.vm.incremented_units).toBe(mockOperation.planned_number_units)
  })

  it('initializes incrementer correctly when there are no operations', () => {
    const mockOperation = { planned_number_units: 0 }
    wrapper.setData({ operationInformation: [mockOperation] })
    wrapper.vm.initializeIncrementer()
    expect(wrapper.vm.incremented_units).toBe(0)
  })

  it('restarts the incrementer', () => {
    const startIncrementerSpy = jest.spyOn(wrapper.vm, 'startIncrementer')
    wrapper.vm.restartIncrementer()
    expect(startIncrementerSpy).toHaveBeenCalled()
  })
})
-------------------
<template>
  <v-container fluid>
    <v-row>
      <v-col
        ><ProcessChart
          :incremented-units="incremented_units"
          :non-defective-products="nonDefectiveProducts"
          :working-rate="working_rate"
          :operationInformation="operation_table"
      /></v-col>
    </v-row>
  </v-container>
</template>

<script>
import ProcessChart from './ProcessInformationScreen/ProcessChart.vue'
import { FetchAPI } from '@/utility/apiRequest'

export default {
  name: 'ProcessInformationScreen',
  components: {
    ProcessChart,
  },
  data() {
    return {
      reference_CT: 0,
      operationInformation: [],
      incremented_units: 0,
      incrementInterval: null,
      nonDefectiveProducts: 0,
      working_rate: 0,
      operation_table: [],
    }
  },
  async mounted() {
    await this.fetchAllOperations()
    await this.fetchReferenceCT()
  },
  methods: {
    /**
     * Retrieves all operation information
     */
    async fetchAllOperations() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-all-operations')
        this.operationInformation = [...response.data]
        this.nonDefectiveProducts =
          this.operationInformation[this.operationInformation.length - 1].non_defective_products
        this.initializeIncrementer()
        this.getOperationTable()
      } catch (error) {
        console.log(error)
      }
    },

    /**
     * Retrieves the reference cycle time
     */
    async fetchReferenceCT() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-ref-cycle-time')

        if (response.success) {
          let ref_CT = response.data[0].reference_cycle_time * 1000
          this.reference_CT = ref_CT || 2000
          this.restartIncrementer()
        }
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Updates the planned number of units
     */
    async updatePlannedUnits() {
      try {
        const api = new FetchAPI()
        const lastOperation = this.operationInformation[this.operationInformation.length - 1]

        if (lastOperation) {
          const processId = lastOperation.process_id
          const payload = { planned_number_units: this.incremented_units }

          await api.put(`/api/update-units/${processId}`, payload)
        }
      } catch (error) {
        console.error('Failed to update planned number units:', error)
      }
    },
    /**
     * Assign the value of global variable incremented_units and initialize the increment function
     */
    initializeIncrementer() {
      if (this.operationInformation.length > 0) {
        const lastItem = this.operationInformation[this.operationInformation.length - 1]
        this.incremented_units = lastItem.planned_number_units || 0

        this.startIncrementer()
      }
    },
    /**
     * Starts incrementing the planned units and work time rate
     */
    startIncrementer() {
      this.clearIncrementer()
      const condition = this.operationInformation.length > 0 && this.reference_CT !== 0

      this.incrementInterval = setInterval(async () => {
        if (condition) {
          this.incremented_units += 1
        }
        await this.updatePlannedUnits()
        await this.calculateWorkingTime()
      }, this.reference_CT)
    },
    /**
     * Restart the startIncrementer()
     */
    restartIncrementer() {
      this.startIncrementer()
    },
    /**
     * Resets the interval value
     */
    clearIncrementer() {
      if (this.incrementInterval) {
        clearInterval(this.incrementInterval)
      }
    },
    /**
     * Calculate the working
     */
    async calculateWorkingTime() {
      this.working_rate = +((this.nonDefectiveProducts / this.incremented_units) * 100).toFixed(2)
    },
    /**
     * Function use for getting product number format
     * @returns {string} new formatted  product number
     */
    formatProductNumber(number) {
      const defaultFill = '0000'

      if (String(number).length === 5) {
        return '9999'
      }
      return (defaultFill + number).substr(-4)
    },

    /**
     * Maps through the operationInformation array and creates new object
     */
    getOperationTable() {
      const operationInformation = this.operationInformation
      const operationInformation_map = operationInformation.map(
        (filObj) =>
          new Object({
            process_id: filObj.process_id,
            process_name: filObj.process_name,
            product_number: this.formatProductNumber(filObj.product_number),
            facility_cycle_time: filObj.facility_cycle_time.toFixed(2),
          }),
      )

      this.operation_table = operationInformation_map
    },
  },
}
</script>
