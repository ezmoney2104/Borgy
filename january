// ProcessInformatioScreen

<template>
  <v-container fluid>
    <v-row>
      <v-col
        ><ProcessChart
          :incremented-units="incrementedUnits"
          :non-defective-products="nonDefectiveProducts"
          :working-rate="workingRate"
          :operationInformation="operation_table"
      /></v-col>
    </v-row>
    <v-row
      ><v-col><replenishment-notice :notice="replenismentData"></replenishment-notice></v-col
    ></v-row>
  </v-container>
</template>

<script>
import ProcessChart from '@/components/pages/ProcessInformationScreen/ProcessChart.vue'
import ReplenishmentNotice from '@/components/pages/ProcessInformationScreen/ReplenishmentNotice.vue'
import { FetchAPI } from '@/utility/apiRequest'

export default {
  name: 'ProcessInformationScreen',
  components: {
    ProcessChart,
    ReplenishmentNotice,
  },
  data() {
    return {
      referenceCT: 0,
      operationInformation: [],
      incrementedUnits: 0,
      incrementInterval: null,
      nonDefectiveProducts: 0,
      workingRate: 0,
      operation_table: [],
      replenismentData: [],
      abnormalitiesData: [],
    }
  },
  async mounted() {
    await this.fetchAllOperations()
    await this.fetchReferenceCT()
    await this.fetchReplenismentNotice()
    await this.setAbnormalitiesData()
  },
  methods: {
    /**
     * Retrieves all operation information
     */
    async fetchAllOperations() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-all-operations')
        this.operationInformation = [...response.data]
        this.nonDefectiveProducts =
          this.operationInformation[this.operationInformation.length - 1].non_defective_products
        this.initializeIncrementer()
        this.getOperationTable()
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Retrieves data from the replenisment notice table
     */
    async fetchReplenismentNotice() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-replenishment-notice')
        this.replenismentData = [...response.data]
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Retrieves all Abnormalities
     * @returns {array} abnormalities array data
     */
    async fetchAbnormalities() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-abnormalities')
        return [...response.data]
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Assign the fetched abnormalities data to global variable abnormalitiesData
     */
    async setAbnormalitiesData() {
      this.abnormalitiesData = await this.fetchAbnormalities()
    },
    /**
    /**
     * Retrieves the reference cycle time
     */
    async fetchReferenceCT() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-ref-cycle-time')

        if (response.success) {
          let ref_CT = response.data[0].reference_cycle_time * 1000
          this.referenceCT = ref_CT || 2000
          this.restartIncrementer()
        }
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Updates the planned number of units
     */
    async updatePlannedUnits() {
      try {
        const api = new FetchAPI()
        const lastOperation = this.operationInformation[this.operationInformation.length - 1]

        if (lastOperation) {
          const processId = lastOperation.process_id
          const payload = { planned_number_units: this.incrementedUnits }

          await api.put(`/api/update-units/${processId}`, payload)
        }
      } catch (error) {
        console.error('Failed to update planned number units:', error)
      }
    },
    /**
     * Assign the value of global variable incrementedUnits and initialize the increment function
     */
    initializeIncrementer() {
      if (this.operationInformation.length > 0) {
        const lastItem = this.operationInformation[this.operationInformation.length - 1]
        this.incrementedUnits = lastItem.planned_number_units || 0

        this.startIncrementer()
      }
    },
    /**
     * Starts incrementing the planned units and work time rate
     */
    startIncrementer() {
      this.clearIncrementer()
      const condition = this.operationInformation.length > 0 && this.referenceCT !== 0

      this.incrementInterval = setInterval(async () => {
        if (condition) {
          this.incrementedUnits += 1
        }
        await this.updatePlannedUnits()
        await this.calculateWorkingTime()
      }, this.referenceCT)
    },
    /**
     * Restart the startIncrementer()
     */
    restartIncrementer() {
      this.startIncrementer()
    },
    /**
     * Resets the interval value
     */
    clearIncrementer() {
      if (this.incrementInterval) {
        clearInterval(this.incrementInterval)
      }
    },
    /**
     * Calculate the working
     */
    async calculateWorkingTime() {
      this.workingRate = +((this.nonDefectiveProducts / this.incrementedUnits) * 100).toFixed(2)
    },
    /**
     * Function use for getting product number format
     * @returns {string} new formatted  product number
     */
    formatProductNumber(number) {
      const defaultFill = '0000'

      if (String(number).length === 5) {
        return '9999'
      }
      return (defaultFill + number).substr(-4)
    },

    /**
     * Maps through the operationInformation array and creates new object
     */
    getOperationTable() {
      const operationInformation = this.operationInformation
      const operationInformation_map = operationInformation.map(
        (filObj) =>
          new Object({
            process_id: filObj.process_id,
            process_name: filObj.process_name,
            product_number: this.formatProductNumber(filObj.product_number),
            facility_cycle_time: filObj.facility_cycle_time.toFixed(2),
          }),
      )

      this.operation_table = operationInformation_map
    },
  },
}
</script>


// ProcessChart

<template>
  <v-container fluid>
    <v-row>
      <ProductionLine
        :incremented-units="incrementedUnits"
        :non-defective-products="nonDefectiveProducts"
        :working-rate="workingRate"
      />
    </v-row>

    <v-row>
      <OperationTable :operationInformation="operationInformation" />
    </v-row>
  </v-container>
</template>

<script>
import ProductionLine from './ProcessChart/ProductionLine.vue'
import OperationTable from './ProcessChart/OperationTable.vue'
export default {
  name: 'ProcessChart',
  components: {
    ProductionLine,
    OperationTable,
  },
  /**
   * @description
   * Recieves data from different components
   * @array data:
   * - operationInformation {array} - array of objects of the operations
   * @number data:
   * - incrementedUnits {int} - incremented planned number of units
   * - nonDefectiveProducts {int} - number of non-defective product of the last process
   * - workingRate {int} - number of working rate
   */
  props: {
    operationInformation: {
      type: Array,
    },
    incrementedUnits: {
      type: Number,
      default: 0,
    },
    nonDefectiveProducts: {
      type: Number,
      default: 0,
    },
    workingRate: {
      type: Number,
      default: 0,
    },
  },
  watch: {
    incrementedUnits: {
      deep: true,
      immediate: true,
      handler(newVal) {
        if (newVal) {
          return newVal
        }
      },
    },
    workingRate: {
      deep: true,
      immediate: true,
      handler(newVal) {
        if (newVal) {
          return newVal
        }
      },
    },
  },
}
</script>


// ReplenishmentNotice

<template>
  <v-container fluid>
    <v-row>
      <common-label :item="ReplenishmentNoticeTitle" />
    </v-row>
    <v-row>
      <v-col class="ma-0 pa-0">
        <v-list class="replenish-list">
          <v-list-item v-for="(error, index) in notice" :key="index" class="error-item">
            <v-list-item-title
              class="replenish-list-item"
              :title="`${index + 1} ${error.process_name}  ${error.error_code}`"
              v-if="notice.length === 0 || notice.length > 0"
            >
              <span class="replenish-number">{{ index + 1 }} </span>
              <span class="truncate-text">{{ error.process_name }} {{ error.error_code }}</span>
            </v-list-item-title>
          </v-list-item>
        </v-list>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import CommonLabel from '@/components/common/CommonLabel.vue'
import { REPLENISHMENT_NOTICE_LABEL } from '@/common/recipe/rLabels'

export default {
  name: 'ReplenishmentNotice',
  components: {
    CommonLabel,
  },
  /**
   * @description
   * Recieves data from different components
   * @array data:
   * - notice {array} - array of objects of the operations
   */
  props: {
    notice: {
      type: Array,
      required: true,
    },
  },
  data() {
    return {
      ReplenishmentNoticeTitle: REPLENISHMENT_NOTICE_LABEL,
    }
  },
}
</script>

<style scoped>
.replenish-list {
  background-color: #616161;
  padding: 0 8px;
  height: 7.5rem;
}

.replenish-list-item {
  padding: 5px 0;
  height: 45px;
  display: flex;
  vertical-align: middle;
  align-items: center;
}

.replenish-number {
  border: 0.125rem solid red;
  border-radius: 50%;
  padding: 0.2rem;
  text-align: center;
  font-size: 0.8rem;
  font-weight: 700;
  display: inline-block;
  width: 3.9ch;
  aspect-ratio: 1 / 1;
}
.error-item {
  margin: 8px 0;
  background-color: #ffca37;
  color: red;
  font-weight: bolder;
  padding: 0 10px !important;
}

.truncate-text {
  font-weight: 500;
  font-size: 20px;
  margin-left: 10px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
</style>


// OperationTable

<template>
  <v-container fluid>
    <v-row><common-label :item="operationTableTitle" /></v-row>

    <v-row>
      <v-col class="ma-0 pa-0">
        <common-table
          :item-table="TABLE_PROPERTIES"
          :rows="operationInformation.slice(0, 7)"
        ></common-table>
      </v-col>
      <v-col class="ma-0 pa-0" v-show="operationInformation.length > 7">
        <common-table
          :item-table="TABLE_PROPERTIES"
          :rows="operationInformation.slice(7)"
        ></common-table>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import CommonLabel from '@/components/common/CommonLabel.vue'
import CommonTable from '@/components/common/CommonTable.vue'
import { OPERATION_TABLE_LABEL } from '@/common/recipe/rLabels'
import { OPERATION_TABLE_PROPERTIES } from '@/common/recipe/rTables'
export default {
  name: 'OperationTable',
  components: {
    CommonLabel,
    CommonTable,
  },
  /**
   * @description
   * Recieves data from different components
   * @array data:
   * - operationInformation {array} - array of objects of the operations
   */
  props: {
    operationInformation: {
      type: Array,
    },
  },
  data() {
    return {
      operationTableTitle: OPERATION_TABLE_LABEL,
      TABLE_PROPERTIES: { ...OPERATION_TABLE_PROPERTIES },
    }
  },
}
</script>


// ProductionLine

<template>
  <v-container fluid>
    <v-row class="ProductLineHeader"><common-label :item="productionLineTitle" /></v-row>
    <v-row
      ><common-table
        :item-table="TABLE_PROPERTIES"
        :first-column="{ value: incrementedUnits, symbol: '台' }"
        :second-column="{ value: nonDefectiveProducts, symbol: '台' }"
        :third-column="{ value: workingRate, symbol: '%' }"
      ></common-table
    ></v-row>
  </v-container>
</template>

<script>
import { PRODUCTION_LINE_LABEL } from '@/common/recipe/rLabels'
import { PROUDUCT_LINE_TABLE } from '@/common/recipe/rTables'
import CommonLabel from '@/components/common/CommonLabel.vue'
import CommonTable from '@/components/common/CommonTable.vue'

export default {
  name: 'ProcessLine',
  components: {
    CommonLabel,
    CommonTable,
  },
  /**
   * @description
   * Recieves data from different components
   * @number data:
   * - incrementedUnits {int} - incremented planned number of units
   * - nonDefectiveProducts {int} - number of non-defective product of the last process
   * - workingRate {int} - number of working rate
   */
  props: {
    incrementedUnits: {
      type: Number,
      default: 0,
    },
    nonDefectiveProducts: {
      type: Number,
      default: 0,
    },
    workingRate: {
      type: Number,
      default: 0,
    },
  },
  data() {
    return {
      TABLE_PROPERTIES: { ...PROUDUCT_LINE_TABLE },
      productionLineTitle: PRODUCTION_LINE_LABEL,
    }
  },
}
</script>
<style scoped>
.ProductLineHeader {
  margin-bottom: 1rem;
}
</style>


// CommonTable

<template>
  <v-table class="custom-table" style="flex-direction: column">
    <thead style="flex-direction: column">
      <tr>
        <th
          v-show="itemTable.TABLE_HEADER.length != 0"
          v-for="(column, columnIndex) in itemTable.TABLE_HEADER"
          :key="columnIndex"
          v-bind="column.directives"
          id="custom-header"
        >
          <common-label :item="column" class="text-h6 font-weight-bold"></common-label>
        </th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="(row, rowIndex) in rows?.length ? rows : [itemTable.TABLE_COLUMN]" :key="rowIndex">
        <td
          v-for="(cell, cellIndex) in row"
          :key="cellIndex"
          v-bind="cell.directives"
          id="custom-row"
          :style="cellIndex === 'facility_cycle_time' ? getCellColor(cell) : null"
        >
          <common-label
            :item="{
              display: {
                label:
                  cellIndex === 'facility_cycle_time'
                    ? cell + 's'
                    : displayColumnLabel(cell, cellIndex),
              },
            }"
          />
        </td>
      </tr>
    </tbody>
  </v-table>
</template>

<script>
import CommonLabel from './CommonLabel.vue'

export default {
  name: 'CommonTable',
  components: { CommonLabel },
  /**
   * @description
   * Receives data from different component
   * @object data:
   * - itemTable {object} - table properties
   * - firstColumn {object} - table value for column 1
   * - secondColumn {object} - table value for column 2
   * - thirdColumn {object} - table value for column 3
   * - fourthColumn {object} - table value for column 4
   * @Array data:
   * - rows {array} - any array value for table body rows
   */
  props: {
    itemTable: {
      type: Object,
      required: true,
    },
    rows: {
      type: Array,
    },
    firstColumn: {
      type: Object,
    },
    secondColumn: {
      type: Object,
    },
    thirdColumn: {
      type: Object,
    },
    fourthColumn: {
      type: Object,
    },
  },
  methods: {
    /**
     * Generates the column labels
     * @param {string || object} label - column value
     * @param {int} columnIndex - column index
     * @returns {string} column label
     */
    displayColumnLabel(label, columnIndex) {
      const columns = [this.firstColumn, this.secondColumn, this.thirdColumn, this.fourthColumn]
      const column = columns[columnIndex]
      if (column && (column.value || column.value > 0)) {
        return `${column.value} ${column.symbol || ''}`
      }

      let newLabel = typeof label == 'object' ? label.display.label : label
      return newLabel
    },

    /**
     * Change the background of facility CT if exceeds 2.00s
     */
    getCellColor(CT) {
      return {
        background: CT > 2 ? 'red' : null,
      }
    },
  },
}
</script>

<style scoped>
#custom-header {
  border-color: rgb(204, 204, 204);
  height: 2.6rem;
  text-align: center;
  font-weight: bolder;
}

#custom-row {
  border-color: rgb(204, 204, 204);
  height: 2.5rem;
  text-align: center;
  font-weight: bolder;
}

.custom-table {
  width: 100%;
  display: flex;
  flex-direction: column;
}
.custom-table th {
  border: 1px solid rgb(204, 204, 204);
  background-color: #2e2e2e;
  color: #ffffff;
}

.custom-table td {
  border: 1px solid rgb(204, 204, 204);
  background-color: #3a3a3a;
  color: #ffffff;
}

@media screen and (max-width: 1688px) {
  .custom-table {
    flex-direction: column;
    width: 400rem;
  }
}
</style>


// CommonLabel

<template>
  <label v-bind="item.directives">{{ item.display.label }}</label>
</template>

<script>
export default {
  name: 'CommonLabel',
  /**
   * @description
   * Receives object of data
   * * @object directives:
   * - directives {Object} - includes attributes of the component
   * - label {String} - text label of the component
   */
  props: {
    item: {
      type: Object,
      required: true,
    },
  },
}
</script>


// rTables

const OPERATION_INFORMATION_TABLE = {
  TABLE_HEADER: [
    {
      componentName: 'CommonLabel',
      display: {
        label: '稼働状況',
      },
      directives: {
        style: {
          fontWeight: 'bold',
          width: '14rem',
          backgroundColor: '#333333',
          borderColor: 'white',
          textAlign: 'center',
          color: 'white',
        },
      },
    },
    {
      componentName: 'CommonLabel',
      display: {
        label: '',
      },
      directives: {
        style: {
          fontWeight: 'bold',
          width: '10rem',
          borderColor: 'white',
          textAlign: 'center',
        },
      },
    },
  ],
  TH_DIRECTIVES: {
    class: 'custom-table',
  },

  TABLE_COLUMN: [],
}

const PROUDUCT_LINE_TABLE = {
  TABLE_HEADER: [
    {
      componentName: 'CommonLabel',
      display: {
        label: '計画台数(累計)',
      },
    },
    {
      componentName: 'CommonLabel',
      display: {
        label: '生産台数(累計)',
      },
    },
    {
      componentName: 'CommonLabel',
      display: {
        label: '稼働率',
      },
    },
  ],
  TH_DIRECTIVES: {
    class: 'custom-table',
  },
  TABLE_COLUMN: [
    {
      componentName: 'CommonLabel',
      display: {
        label: '-',
      },
      directives: {
        style: {
          width: '30%',
        },
      },
    },
    {
      componentName: 'CommonLabel',
      display: {
        label: '-',
      },
      directives: {
        style: {
          width: '30%',
        },
      },
    },
    {
      componentName: 'CommonLabel',
      display: {
        label: '-',
      },
      directives: {
        style: {
          width: '30%',
        },
      },
    },
  ],
  TABLE_ROW: [],
}

const OPERATION_TABLE_PROPERTIES = {
  TABLE_HEADER: [
    {
      componentName: 'CommonLabel',
      display: {
        label: 'No.',
      },
      directives: {
        style: {
          width: '8%',
        },
      },
    },
    {
      componentName: 'CommonLabel',
      display: {
        label: '工程名',
      },
      directives: {
        style: {
          maxWidth: '50%',
        },
      },
    },
    {
      componentName: 'CommonLabel',
      display: {
        label: '品番',
      },
      directives: {
        style: {
          width: '18%',
        },
      },
    },
    {
      componentName: 'CommonLabel',
      display: {
        label: '設備CT',
      },
      directives: {
        style: {
          width: '24%',
        },
      },
    },
  ],
  TH_DIRECTIVES: {
    class: 'custom-table',
  },
  TABLE_COLUMN: [
    {
      componentName: 'CommonLabel',
      display: {
        label: '-',
      },
    },
    {
      componentName: 'CommonLabel',
      display: {
        label: '-',
      },
    },
    {
      componentName: 'CommonLabel',
      display: {
        label: '-',
      },
    },
    {
      componentName: 'CommonLabel',
      display: {
        label: '-',
      },
    },
  ],
  TABLE_ROW: [],
}

export { OPERATION_INFORMATION_TABLE, PROUDUCT_LINE_TABLE, OPERATION_TABLE_PROPERTIES }


// rLabels

const NAVBAR_TITLE_LABEL = {
  componentName: 'CommonLabel',
  data: {
    saveAs: 'appTitle',
  },
  display: {
    label: 'GSP3ミリ波1号ライン',
  },
  directives: {
    class: 'fw-bold fs-2 text-h4',
  },
}

const NAVBAR_DATETIME_LABEL = {
  componentName: 'CommonLabel',
  data: {
    saveAs: 'datetime',
  },
  display: {
    label: '',
  },
  directives: {
    class: 'fs-2 text-h6',
  },
}

const PRODUCTION_LINE_LABEL = {
  componentName: 'CommonLabel',
  data: {
    saveAs: 'productionLineTitle',
  },
  display: {
    label: 'ライン稼働状況',
  },
  directives: {
    class: 'fs-2 text-h4',
  },
}

const OPERATION_TABLE_LABEL = {
  componentName: 'CommonLabel',
  data: {
    saveAs: 'operationTableTitle',
  },
  display: {
    label: '子設備情報',
  },
  directives: {
    class: 'fs-2 text-h4 mb-4 mt-5',
  },
}

const REPLENISHMENT_NOTICE_LABEL = {
  componentName: 'CommonLabel',
  data: {
    saveAs: 'ReplenishmentNoticeTitle',
  },
  display: {
    label: '段取り/補給予告',
  },
  directives: {
    class: 'fs-2 text-h4 mb-4 mt-5',
  },
}

export {
  NAVBAR_TITLE_LABEL,
  NAVBAR_DATETIME_LABEL,
  PRODUCTION_LINE_LABEL,
  OPERATION_TABLE_LABEL,
  REPLENISHMENT_NOTICE_LABEL,
}


/// apiRequest.js

import axios from 'axios'
import { API_BASE_URL } from '@/enviroment'

/**
 * Initialization of all API Requests.
 */
export class FetchAPI {
  /**
   * Send get request
   * @param {String} uri - uri of the database
   * @param {Object} obj - check for the new reference
   * @return {Object} response.data - the response from the backend
   */
  async get(uri, obj = {}) {
    let response
    try {
      response = await axios.get(API_BASE_URL + uri, obj)
    } catch (error) {
      response = {
        data: {
          success: false,
          message_response: error.message,
          message_content: error.message,
        },
      }
    }
    return response.data
  }
  /**
   * Send put request
   * @param {String} uri - uri of the database
   * @param {String} data - data to be updated to the database
   * @return {Object} response.data - the response from the backend
   */
  async put(uri, data) {
    let response
    try {
      response = await axios.put(API_BASE_URL + uri, {
        params: data,
      })
    } catch (error) {
      response = {
        data: error?.response?.data,
      }
    }
    return response?.data
  }
}

/// environment.js

/**
 * Set Api Base Url
 * @return {String}
 */
function getApiBaseUrl() {
  const env = process.env.NODE_ENV
  if (env === 'development') {
    return 'http://localhost:5000'
  }

  const url = window.location.origin + '/'
  return url
}

const API_BASE_URL = getApiBaseUrl()
export { API_BASE_URL }




## a_operation_information.py

from src.setup_db_example.models.m_operation_information import OperationInformationDb
from src.setup_db_example.schemas.s_operation_information import (
    OperationInformationSchema,
)
from src.setup_db_example.database import db
from flask import Blueprint, request

operation_information_router = Blueprint("a_operation_", __name__)
operation_information_schema = OperationInformationSchema


@operation_information_router.route("/api/get-coordinates", methods=["GET"])
def get_coordinates():
    """Fetch all the coordinates

    Returns:
        dict: return the api response
    """
    operation = OperationInformationDb
    process = (
        operation.query.filter(operation.process_id <= 14)
        .order_by(operation.process_id)
        .all()
    )

    operation_data = operation_information_schema(many=True).dump(process)

    coordinates_data= [{
        "process_id": item["process_id"],
        "operation_status":  item["operation_status"],
        "x": item["coordinates"]["x_position"],
        "y": item["coordinates"]["y_position"],
        "width": item["coordinates"]["width"],
        "height": item["coordinates"]["height"],
    }  for item in operation_data]

    return {
        "success": True,
        "message_response": "COORDINATES FETCHED SUCCESSFULLY",
        "message_content": "COORDINATES fetched successfully",
        "data": coordinates_data,
    }, 200


@operation_information_router.route("/api/get-all-operations", methods=["GET"])
def get_all_operations():
    """Fetch all the operations information

    Returns:
        dict: return the api response
    """
    operation = OperationInformationDb
    query = (
        operation.query.filter(operation.process_id <= 14)
        .order_by(operation.process_id)
        .all()
    )

    operation_data = operation_information_schema(many=True).dump(query)

    return {
        "success": True,
        "message_response": "OPERATIONS FETCHED SUCCESSFULLY",
        "message_content": "OPERATIONS fetched successfully",
        "data": operation_data,
    }, 200


@operation_information_router.route(
    "/api/update-units/<int:process_id>", methods=["PUT"]
)
def update_units(process_id):
    """Update the planned_number_units for a specific operation

    Returns:
        dict: return the api response

    """

    try:
        data = request.json.get("params")
        planned_number_units = data.get("planned_number_units")

        if planned_number_units is None:
            return {"success": False, "message": "Missing planned_number_units"}, 400

        operation = OperationInformationDb.query.filter_by(
            process_id=process_id
        ).first()

        if not operation:
            return {"success": False, "message": "Operation not found"}, 400

        operation.planned_number_units = planned_number_units
        db.session.commit()

        return {
            "success": True,
            "message": "PLANNED_NUMBER_UNITS UPDATED SUCCESSFULLY",
            "updated_value": planned_number_units,
        }, 200

    except Exception as e:
        return {"success": False, "message": f"Error updating units: {str(e)}"}, 500


## a_replenishment_notice.py

from src.setup_db_example.models.m_replenishment_notice import ReplenishmentDb
from src.setup_db_example.schemas.s_replenishment_notice import ReplenishmentSchema
from flask import Blueprint

replenishment_notice_router = Blueprint("a_replenishment_notice", __name__)
replenishment_notice_schema = ReplenishmentSchema


@replenishment_notice_router.route("/api/get-replenishment-notice", methods=["GET"])
def get_replenishment_notice():
    """Fetch replenishment notice

    Returns:
        dict: return the api response
    """

    query = (
        ReplenishmentDb.query.order_by(ReplenishmentDb.setup_date_time.asc())
        .limit(2)
        .all()
    )

    replenishment_notice_data = replenishment_notice_schema(many=True).dump(query)

    filtered_data = [
        {
            "process_name": item["operation_details"]["process_name"],
            "error_code": (item["abnormalities_content"]["error_code"]),
        }
        for item in replenishment_notice_data
    ]

    return {
        "success": True,
        "message_response": "REPLENISHMENT NOTICE FETCHED SUCCESSFULLY",
        "message_content": "REPLENISHMENT NOTICE fetched successfully",
        "data": filtered_data,
    }, 200


@replenishment_notice_router.route("/api/get-abnormalities", methods=["GET"])
def get_abnormalities():
    """Fetch abnormalities

    Returns:
        dict: return the api response
    """

    query = (
        ReplenishmentDb.query.order_by(ReplenishmentDb.setup_date_time.asc())
        .limit(14)
        .all()
    )

    abnormalities = replenishment_notice_schema(many=True).dump(query)
    abnormalities_data = []
    for item in abnormalities:

        if  item["operation_details"]["operation_status"] == 3:
            abnormalities_data_dict = {
                "process_name": item["operation_details"]["process_name"],
                "error_code": item["abnormalities_content"]["error_code"],
                "error_message": item["abnormalities_content"]["error_message"],
            }

            abnormalities_data.append(abnormalities_data_dict)


    return {
        "success": True,
        "message_response": "ABNORMALITIES FETCHED SUCCESSFULLY",
        "message_content": "Abnormalities fetched successfully",
        "data": abnormalities_data,
    }, 200


## m_abnormalities.py

from src.setup_db_example.database import db


class AbnormalitiesDb(db.Model):
    """Represents a model for storing the data in abnormalities_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "abnormalities_tbl"
    abnormalities_id = db.Column(db.Integer, primary_key=True)
    error_code = db.Column(db.String(16), nullable=False)
    error_message = db.Column(db.String(255), nullable=False)

    replenishment_notice = db.relationship(
        "ReplenishmentDb", back_populates="abnormalities_content"
    )

## m_replenishment_notice.py

from src.setup_db_example.database import db
from src.setup_db_example.models.m_abnormalities import AbnormalitiesDb


class ReplenishmentDb(db.Model):
    """Represents a model for storing the data in replenishment_notice_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "replenishment_notice_tbl"
    replenishment_id = db.Column(db.Integer, primary_key=True)
    setup_date_time = db.Column(db.DateTime, nullable=False)
    process_id = db.Column(
        db.Integer,
        db.ForeignKey("operation_information_tbl.process_id"),
        nullable=False,
    )

    abnormalities_id = db.Column(
        db.Integer,
        db.ForeignKey("abnormalities_tbl.abnormalities_id"),
        nullable=False,
    )

    operation_details = db.relationship(
        "OperationInformationDb", back_populates="replenishment"
    )

    abnormalities_content = db.relationship(
        AbnormalitiesDb, back_populates="replenishment_notice"
    )


## m_operation_information.py

from src.setup_db_example.database import db
from src.setup_db_example.models.m_replenishment_notice import ReplenishmentDb


class OperationInformationDb(db.Model):
    """Represents a model for storing the data in operation_information_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "operation_information_tbl"
    process_id = db.Column(db.Integer, primary_key=True)
    process_name = db.Column(db.String(128), nullable=False)
    operation_status = db.Column(db.Integer, nullable=False)
    product_number = db.Column(db.Integer, nullable=False)
    planned_number_units = db.Column(db.Integer, nullable=False)
    non_defective_products = db.Column(db.Integer, nullable=False)
    facility_cycle_time = db.Column(db.Float(3), nullable=False)
    coordinates_id = db.Column(
        db.Integer,
        db.ForeignKey("coordinates_tbl.coordinates_id"),
        nullable=False,
        unique=True,
    )
    coordinates = db.relationship(
        "CoordinatesDb", back_populates="operation_information"
    )

    replenishment = db.relationship(
        "ReplenishmentDb", back_populates="operation_details"
    )

## m_coordinates.py

from src.setup_db_example.database import db

class CoordinatesDb(db.Model):
    """Represents a model for storing the data in coordinates_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "coordinates_tbl"
    coordinates_id = db.Column(db.Integer, primary_key=True)
    x_position = db.Column(db.Integer, nullable=False)
    y_position = db.Column(db.Integer, nullable=False)
    width = db.Column(db.Integer, nullable=False)
    height = db.Column(db.Integer, nullable=False)
    operation_information = db.relationship('OperationInformationDb', back_populates='coordinates')

## m_reference_cycle.py

from src.setup_db_example.database import db


class ReferenceCycleDb(db.Model):
    """Represents a model for storing the data in reference_cycle_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "reference_cycle_tbl"
    reference_id = db.Column(db.Integer, primary_key=True)
    reference_cycle_time = db.Column(db.Integer, nullable=False)

## s_abnormalities.py

from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow
from src.setup_db_example.models.m_abnormalities import AbnormalitiesDb

ma = Marshmallow()


class AbnormalitiesSchema(SQLAlchemyAutoSchema):
    """
    This class positions schema with the corresponding db table model

    Args:
        SQLAlchemyAutoSchema (sqlalchemy): SQLAlchemy engine
    """

    class Meta:
        """Meta Class"""

        model = AbnormalitiesDb
        load_instance = True
        include_relationships = True


## s_coordinates.py

from src.setup_db_example.models.m_coordinates import CoordinatesDb
from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow

ma = Marshmallow()


class CoordinatesSchema(SQLAlchemyAutoSchema):
    """
    This class positions schema with the corresponding db table model

    Args:
        SQLAlchemyAutoSchema (sqlalchemy): SQLAlchemy engine
    """

    class Meta:
        """Meta Class"""

        model = CoordinatesDb
        load_instance = True
        include_relationships = True


## s_operation_information.py

from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow
from src.setup_db_example.models.m_operation_information import OperationInformationDb
from src.setup_db_example.schemas.s_coordinates import CoordinatesSchema

ma = Marshmallow()


class OperationInformationSchema(SQLAlchemyAutoSchema):
    """
    This class positions schema with the corresponding db table model

    Args:
        SQLAlchemyAutoSchema (sqlalchemy): SQLAlchemy engine
    """

    class Meta:
        """Meta Class"""

        model = OperationInformationDb
        load_instance = True
        include_relationships = True

    coordinates = ma.Nested(CoordinatesSchema)


## s_reference_cycle.py

from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow
from src.setup_db_example.models.m_reference_cycle import ReferenceCycleDb

ma = Marshmallow()


class ReferenceCycleSchema(SQLAlchemyAutoSchema):
    """
    This class positions schema with the corresponding db table model

    Args:
        SQLAlchemyAutoSchema (sqlalchemy): SQLAlchemy engine
    """

    class Meta:
        """Meta Class"""

        model = ReferenceCycleDb
        load_instance = True

## s_replenishment_notice.py

from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow
from src.setup_db_example.models.m_replenishment_notice import ReplenishmentDb
from src.setup_db_example.schemas.s_abnormalities import AbnormalitiesSchema
from src.setup_db_example.schemas.s_operation_information import (
    OperationInformationSchema,
)

ma = Marshmallow()


class ReplenishmentSchema(SQLAlchemyAutoSchema):
    """
    This class positions schema with the corresponding db table model

    Args:
        SQLAlchemyAutoSchema (sqlalchemy): SQLAlchemy engine
    """

    class Meta:
        """Meta Class"""

        model = ReplenishmentDb
        load_instance = True
        include_relationships = True

    operation_details = ma.Nested(OperationInformationSchema)
    abnormalities_content = ma.Nested(AbnormalitiesSchema)


## database.py

from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.sql import text
from flask_migrate import Migrate, upgrade, init
from time import sleep
import os


# Create instances of SQLAlchemy and Migrate
db = SQLAlchemy()
migrate = Migrate()


def initialize_database(app):
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = True
    app.config["SQLALCHEMY_DATABASE_URI"] = os.getenv(
        "DATABASE_URL", "postgresql://postgres:postgres@db-nexus_app:5432/db_nexus_app"
    )
    app.config["DEBUG"] = True
    # app.config["SQLALCHEMY_BINDS"] = {"db2": "postgresql://postgres:postgres@db-nexus_app2:5432/db_nexus_app2"}

    db.init_app(app)
    migrate.init_app(app, db)

    # Import your models here so they are registered with SQLAlchemy
    from src.setup_db_example.models.m_reference_cycle import ReferenceCycleDb
    from src.setup_db_example.models.m_coordinates import CoordinatesDb
    from src.setup_db_example.models.m_abnormalities import AbnormalitiesDb
    from src.setup_db_example.models.m_replenishment_notice import ReplenishmentDb
    from src.setup_db_example.models.m_operation_information import (
        OperationInformationDb,
    )

    sleep(2)  # wait for 2 seconds for the TCP to be initialized

    if not os.path.isdir("/usr/opt/nexus-app/backend/migrations"):
        init()
    print("Alembic Migration Initialized")
    __upgrade_database__(app)


def __upgrade_database__(app):
    with app.app_context():
        upgrade()
        print("Database upgraded successfully.")


## app.py

from flask import Flask
from flask_cors import CORS
from src.setup_db_example.database import initialize_database
from src.setup_db_example.api.a_image import image_router
from src.setup_db_example.api.a_operation_information import (
    operation_information_router,
)
from src.setup_db_example.api.a_reference_cycle import reference_cycle_router
from src.setup_db_example.api.a_replenishment_notice import replenishment_notice_router


def create_app():
    app = Flask(__name__)
    CORS(app)

    # Setup Database
    initialize_database(app)
    app.register_blueprint(image_router)
    app.register_blueprint(operation_information_router)
    app.register_blueprint(reference_cycle_router)
    app.register_blueprint(replenishment_notice_router)
    return app


## __init__.py

from flask_admin import Admin
from flask_admin.contrib.sqla import ModelView

from src.setup_db_example.database import db

# NOTE: Import the Models
from src.setup_db_example.models.m_coordinates import CoordinatesDb
from src.setup_db_example.models.m_operation_information import OperationInformationDb
from src.setup_db_example.models.m_reference_cycle import ReferenceCycleDb
from src.setup_db_example.models.m_abnormalities import AbnormalitiesDb
from src.setup_db_example.models.m_replenishment_notice import ReplenishmentDb


class ExportableModelView(ModelView):
    """Export対応ModelView"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.can_export = True


def admin_init(app):
    """flask-admin初期化

    Args:
        app (Flask): flaskアプリケーション
    """
    admin = Admin(app, url="/db-nexus_app/admin")

    admin.add_view(ExportableModelView(CoordinatesDb, db.session))
    admin.add_view(ExportableModelView(OperationInformationDb, db.session))
    admin.add_view(ExportableModelView(ReferenceCycleDb, db.session))
    admin.add_view(ExportableModelView(AbnormalitiesDb, db.session))
    admin.add_view(ExportableModelView(ReplenishmentDb, db.session))
