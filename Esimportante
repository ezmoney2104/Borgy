// ProcessInformationScreen

<template>
  <v-container fluid>
    <v-row>
      <v-col v-show="currentComponent === 'ProcessChart'" class="mb-13"
        ><ProcessChart
          :incremented-units="incrementedUnits"
          :non-defective-products="nonDefectiveProducts"
          :working-rate="workingRate"
          :operationInformation="operation_table"
      /></v-col>
      <v-col v-show="currentComponent === 'ErrorInformation'"
        ><error-information :abnormalities="abnormalitiesData"></error-information
      ></v-col>
    </v-row>

    <v-row
      ><v-col><replenishment-notice :notice="replenishmentData"></replenishment-notice></v-col
    ></v-row>
  </v-container>
</template>

<script>
import ProcessChart from '@/components/pages/ProcessInformationScreen/ProcessChart.vue'
import ReplenishmentNotice from '@/components/pages/ProcessInformationScreen/ReplenishmentNotice.vue'
import { FetchAPI } from '@/utility/apiRequest'
import ErrorInformation from '@/components/pages/ProcessInformationScreen/ErrorInformation.vue'

export default {
  name: 'ProcessInformationScreen',
  components: {
    ProcessChart,
    ReplenishmentNotice,
    ErrorInformation,
  },
  data() {
    return {
      referenceCT: 0,
      operationInformation: [],
      incrementedUnits: 0,
      incrementInterval: null,
      nonDefectiveProducts: 0,
      workingRate: 0,
      operation_table: [],
      replenishmentData: [],
      abnormalitiesData: [],
      currentComponent: 'ProcessChart',
    }
  },
  async mounted() {
    await this.setOperationsData()
    await this.setReferenceCT()
    await this.setAbnormalitiesData()
    await this.setReplenishmentData()

    this.startSwitchInterval()
  },
  methods: {
    /**
     * Starts the interval to toggle between ProcessChart and Abnormalitues
     */
    startSwitchInterval() {
      const intervals = [
        { component: 'ProcessChart', duration: 7000 },
        { component: 'ErrorInformation', duration: 7000 },
      ]

      let index = 0
      const switchComponent = () => {
        this.currentComponent = intervals[index].component
        setTimeout(() => {
          index = (index + 1) % intervals.length
          switchComponent()
        }, intervals[index].duration)
      }

      switchComponent()
    },
    /**
     * Retrieves all operation information
     * @returns {array} retrieved data
     */
    async fetchAllOperations() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-all-operations')
        return [...response.data]
      } catch (error) {
        console.log(error)
      }
    },

    /**
     * Assign the data to global variables operationInformation and nonDefectiveProducts
     */
    async setOperationsData() {
      this.operationInformation = await this.fetchAllOperations()
      await this.setNonDefectiveProducts()
    },
    /**
     * Assign data for non-defective products
     */
    async setNonDefectiveProducts() {
      const lastData = this.operationInformation?.at(-1)

      this.nonDefectiveProducts = lastData?.non_defective_products
      this.initializeIncrementer()
      this.getOperationTable()
    },
    /**
     * Retrieves data from the replenishment notice table
     * @returns {array} retrieved data
     */
    async fetchReplenishmentNotice() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-replenishment-notice')
        return [...response.data]
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Assign replenishment data to global variable replenishmentData
     */
    async setReplenishmentData() {
      this.replenishmentData = await this.fetchReplenishmentNotice()
    },
    /**
     * Retrieves all Abnormalities
     * @returns {array} abnormalities array data
     */
    async fetchAbnormalities() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-abnormalities')
        return [...response.data]
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Assign the fetched abnormalities data to global variable abnormalitiesData
     */
    async setAbnormalitiesData() {
      this.abnormalitiesData = await this.fetchAbnormalities()
    },
    /**
     * Retrieves the reference cycle time
     * @returns {number} retrieved data
     */
    async fetchReferenceCT() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-ref-cycle-time')

        return response.data[0].reference_cycle_time
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Assign data to global variable referenceCT
     */
    async setReferenceCT() {
      let ref_CT = await this.fetchReferenceCT()

      this.referenceCT = ref_CT * 1000 || 2000
      this.startIncrementer()
    },
    /**
     * Updates the planned number of units
     */
    async updatePlannedUnits() {
      try {
        const api = new FetchAPI()
        const lastOperation = this.operationInformation?.at(-1)

        if (lastOperation) {
          const processId = lastOperation.process_id
          const payload = { planned_number_units: this.incrementedUnits }

          await api.put(`/api/update-units/${processId}`, payload)
        }
      } catch (error) {
        console.error('Failed to update planned number units:', error)
      }
    },
    /**
     * Assign the value of global variable incrementedUnits and initialize the increment function
     */
    initializeIncrementer() {
      if (this.operationInformation?.length > 0) {
        const lastItem = this.operationInformation.at(-1)

        this.incrementedUnits = lastItem.planned_number_units || 0
        this.startIncrementer()
      }
    },
    /**
     * Starts incrementing the planned units and work time rate
     */
    startIncrementer() {
      this.clearIncrementer()
      const condition = this.operationInformation?.length > 0 && this.referenceCT !== 0

      this.incrementInterval = setInterval(async () => {
        if (condition) {
          this.incrementedUnits += 1
        }
        await this.updatePlannedUnits()
        await this.calculateWorkingTime()
      }, this.referenceCT)
    },

    /**
     * Resets the interval value
     */
    clearIncrementer() {
      if (this.incrementInterval) {
        clearInterval(this.incrementInterval)
      }
    },
    /**
     * Calculate the working
     */
    async calculateWorkingTime() {
      this.workingRate = +((this.nonDefectiveProducts / this.incrementedUnits) * 100).toFixed(2)
    },
    /**
     * Function use for getting product number format
     * @returns {string} new formatted  product number
     */
    formatProductNumber(number) {
      const defaultFill = '0000'

      if (String(number).length === 5) {
        return '9999'
      }
      return (defaultFill + number).substr(-4)
    },

    /**
     * Maps through the operationInformation array and creates new object
     */
    getOperationTable() {
      const operationInformation = this.operationInformation
      const operationInformation_map = operationInformation?.map(
        (filObj) =>
          new Object({
            process_id: filObj.process_id,
            process_name: filObj.process_name,
            product_number: this.formatProductNumber(filObj.product_number),
            facility_cycle_time: filObj.facility_cycle_time.toFixed(2),
          }),
      )

      this.operation_table = operationInformation_map
    },
  },
}
</script>


// ProcessChart

<template>
  <v-container fluid>
    <v-row>
      <ProductionLine
        :incremented-units="incrementedUnits"
        :non-defective-products="nonDefectiveProducts"
        :working-rate="workingRate"
      />
    </v-row>

    <v-row>
      <OperationTable :operationInformation="operationInformation" />
    </v-row>
  </v-container>
</template>

<script>
import ProductionLine from './ProcessChart/ProductionLine.vue'
import OperationTable from './ProcessChart/OperationTable.vue'
export default {
  name: 'ProcessChart',
  components: {
    ProductionLine,
    OperationTable,
  },
  /**
   * @description
   * Recieves data from different components
   * @array data:
   * - operationInformation {array} - array of objects of the operations
   * @number data:
   * - incrementedUnits {int} - incremented planned number of units
   * - nonDefectiveProducts {int} - number of non-defective product of the last process
   * - workingRate {int} - number of working rate
   */
  props: {
    operationInformation: {
      type: Array,
    },
    incrementedUnits: {
      type: Number,
      default: 0,
    },
    nonDefectiveProducts: {
      type: Number,
      default: 0,
    },
    workingRate: {
      type: Number,
      default: 0,
    },
  },
  watch: {
    incrementedUnits: {
      deep: true,
      immediate: true,
      handler(newVal) {
        if (newVal) {
          return newVal
        }
      },
    },
    workingRate: {
      deep: true,
      immediate: true,
      handler(newVal) {
        if (newVal) {
          return newVal
        }
      },
    },
  },
}
</script>


// OperationTable

<template>
  <v-container fluid>
    <v-row><common-label :item="operationTableTitle" /></v-row>

    <v-row>
      <v-col class="ma-0 pa-0">
        <common-table
          :item-table="TABLE_PROPERTIES"
          :tableData="firstTableOperationInformation"
        ></common-table>
      </v-col>
      <v-col class="ma-0 pa-0" v-show="operationInformation.length > 7">
        <common-table
          :item-table="TABLE_PROPERTIES"
          :tableData="secondTableOperationInformation"
        ></common-table>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import CommonLabel from '@/components/common/CommonLabel.vue'
import CommonTable from '@/components/common/CommonTable.vue'
import { OPERATION_TABLE_LABEL } from '@/common/recipe/rLabels'
import { OPERATION_TABLE_PROPERTIES } from '@/common/recipe/rTables'
export default {
  name: 'OperationTable',
  components: {
    CommonLabel,
    CommonTable,
  },
  /**
   * @description
   * Recieves data from different components
   * @array data:
   * - operationInformation {array} - array of objects of the operations
   */
  props: {
    operationInformation: {
      type: Array,
    },
  },
  data() {
    return {
      operationTableTitle: OPERATION_TABLE_LABEL,
      TABLE_PROPERTIES: { ...OPERATION_TABLE_PROPERTIES },
    }
  },
  computed: {
    /**
     * Slices the array from the index 0 to 7
     * @returns {array} 7 array values or empty array
     */
    firstTableOperationInformation() {
      if (this.operationInformation.length > 0) {
        return this.operationInformation.slice(0, 7)
      } else {
        return []
      }
    },
    /**
     * Slices the array from index 7
     * @returns {array} array values from the 7th index or empty array
     */
    secondTableOperationInformation() {
      if (this.operationInformation.length > 7) {
        return this.operationInformation.slice(7)
      } else {
        return []
      }
    },
  },
}
</script>

// ProductionLine

<template>
  <v-container fluid>
    <v-row><common-label :item="productionLineTitle" /></v-row>
    <v-row
      ><common-table :item-table="TABLE_PROPERTIES" :tableData="tableValues"></common-table
    ></v-row>
  </v-container>
</template>

<script>
import { PRODUCTION_LINE_LABEL } from '@/common/recipe/rLabels'
import { PROUDUCT_LINE_TABLE } from '@/common/recipe/rTables'
import CommonLabel from '@/components/common/CommonLabel.vue'
import CommonTable from '@/components/common/CommonTable.vue'

export default {
  name: 'ProcessLine',
  components: {
    CommonLabel,
    CommonTable,
  },
  /**
   * @description
   * Recieves data from different components
   * @number data:
   * - incrementedUnits {int} - incremented planned number of units
   * - nonDefectiveProducts {int} - number of non-defective product of the last process
   * - workingRate {int} - number of working rate
   */
  props: {
    incrementedUnits: {
      type: Number,
      default: 0,
    },
    nonDefectiveProducts: {
      type: Number,
      default: 0,
    },
    workingRate: {
      type: Number,
      default: 0,
    },
  },
  data() {
    return {
      TABLE_PROPERTIES: { ...PROUDUCT_LINE_TABLE },
      productionLineTitle: PRODUCTION_LINE_LABEL,
    }
  },
  computed: {
    /**
     * Returns the props data in a formatted array
     * @returns {array} data for incrementedUnits, nonDefectiveProducts, and workingRate
     */
    tableValues() {
      return [
        {
          incrementedUnits: this.incrementedUnits > 0 ? `${this.incrementedUnits} 台` : '-',
          nonDefectiveProducts:
            this.nonDefectiveProducts > 0 ? `${this.nonDefectiveProducts} 台` : '-',
          workingRate: this.workingRate > 0 ? `${this.workingRate} %` : '-',
        },
      ]
    },
  },
}
</script>


// ErrorInformation

<template>
  <v-container fluid>
    <v-row> <common-label :item="ErrorInformationTitle" /> </v-row>

    <v-row>
      <v-col class="error-screen">
        <v-list dense>
          <div
            v-for="(item, index) in abnormalities"
            :key="item.id"
            :class="{ 'zoomed-item': currentZoomedIndex === index }"
            class="zoom-item"
            @mouseenter="handleMouseEnter(index)"
            @mouseleave="handleMouseLeave"
          >
            <v-list-item-title>
              <div>
                <span class="error-number">{{ index + 1 }} </span>
              </div>
              <div class="error-description">
                {{ item.process_name }} {{ item.error_code }} {{ item.error_message }}
              </div></v-list-item-title
            >
          </div>
        </v-list></v-col
      ></v-row
    ></v-container
  >
</template>

<script>
import CommonLabel from '@/components/common/CommonLabel.vue'
import { ERROR_INFORMATION_LABEL } from '@/common/recipe/rLabels'

export default {
  name: 'ErrorInformation',
  components: {
    CommonLabel,
  },
  /**
   * @description
   * Recieves data from different components
   * @array data:
   * - abnormalities {array} - array of objects of the operations
   */
  props: {
    abnormalities: {
      type: Array,
      required: true,
    },
  },
  data() {
    return {
      ErrorInformationTitle: ERROR_INFORMATION_LABEL,
      currentZoomedIndex: -1,
    }
  },
  methods: {
    /**
     * Updates the currentZoomedIndex based on the window width and the provided index
     * If the window width is less than 1200, it sets the currentZoomedIndex to the provided index
     * @param {number || null} index - the index to set, or null to reset
     */
    updateZoomedIndex(index) {
      if (window.innerWidth < 1200) {
        this.currentZoomedIndex = index
      }
    },

    /**
     * Set the currentZoomedIndex to the index when mouse hover
     * @param {number} index - The index to set as the current zoomed index
     */
    handleMouseEnter(index) {
      this.updateZoomedIndex(index)
    },
    /**
     * Set currentZoomedIndex to null when mouse is not hover
     */
    handleMouseLeave() {
      this.updateZoomedIndex(null)
    },
  },
}
</script>

<style scoped>
.v-list {
  background-color: #616161;
  padding: 0 8px;
}

.error-screen {
  background-color: #616161;
  padding: 5px 0;
  height: 555px;
  max-height: auto;
}

.zoom-item {
  background-color: #b71c1c;
  margin: 4px 0px;
  padding: 1px;
  border-radius: 4px;
  transition: transform 0.5s ease;
  width: 100%;
  color: white;
}

.zoom-item .v-list-item-title {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: flex;
  flex-wrap: nowrap;
  justify-content: flex-start;
  align-items: center;
  gap: 3px;
}

.zoom-item .error-description {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.zoomed-item .v-list-item-title {
  align-items: flex-start;
}

.zoomed-item .error-description {
  white-space: normal;
  overflow: visible;
  text-overflow: clip;
}

.zoomed-item {
  background-color: #921616;
}

.error-number {
  border: 0.125rem solid #f1f1f1;
  border-radius: 50%;
  padding: 0.2rem;
  text-align: center;
  font-size: 0.75rem;
  font-weight: 700;
  display: inline-block;
  width: 3.9ch;
  aspect-ratio: 1 / 1;
  margin: 2px;
}
</style>


// ReplenishmentNotice

<template>
  <v-container fluid>
    <v-row>
      <common-label :item="ReplenishmentNoticeTitle" />
    </v-row>
    <v-row>
      <v-col class="ma-0 pa-0">
        <v-list class="replenish-list">
          <v-list-item v-for="(error, index) in notice" :key="index" class="error-item">
            <v-list-item-title
              class="replenish-list-item"
              :title="`${index + 1} ${error.process_name}  ${error.error_code}`"
              v-if="notice.length === 0 || notice.length > 0"
            >
              <span class="replenish-number">{{ index + 1 }} </span>
              <span class="truncate-text">{{ error.process_name }} {{ error.error_code }}</span>
            </v-list-item-title>
          </v-list-item>
        </v-list>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import CommonLabel from '@/components/common/CommonLabel.vue'
import { REPLENISHMENT_NOTICE_LABEL } from '@/common/recipe/rLabels'

export default {
  name: 'ReplenishmentNotice',
  components: {
    CommonLabel,
  },
  /**
   * @description
   * Recieves data from different components
   * @array data:
   * - notice {array} - array of objects of the operations
   */
  props: {
    notice: {
      type: Array,
      required: true,
    },
  },
  data() {
    return {
      ReplenishmentNoticeTitle: REPLENISHMENT_NOTICE_LABEL,
    }
  },
}
</script>

<style scoped>
.replenish-list {
  background-color: #616161;
  padding: 0 8px;
  height: 7.5rem;
}

.replenish-list-item {
  padding: 5px 0;
  height: 45px;
  display: flex;
  vertical-align: middle;
  align-items: center;
}

.replenish-number {
  border: 0.125rem solid red;
  border-radius: 50%;
  padding: 0.2rem;
  text-align: center;
  font-size: 0.8rem;
  font-weight: 700;
  display: inline-block;
  width: 3.9ch;
  aspect-ratio: 1 / 1;
}
.error-item {
  margin: 8px 0;
  background-color: #ffca37;
  color: red;
  font-weight: bolder;
  padding: 0 10px !important;
}

.truncate-text {
  font-weight: 600;
  font-size: 20px;
  margin-left: 10px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
</style>


// <template>
  <v-table :class="itemTable?.TH_DIRECTIVES.class" style="flex-direction: column">
    <thead style="flex-direction: column">
      <tr>
        <th
          v-show="itemTable?.TABLE_HEADER.length != 0"
          v-for="(header, index) in itemTable?.TABLE_HEADER"
          :key="index"
          v-bind="header.directives"
          id="custom-header"
        >
          <component
            :is="header.componentName"
            :item="header"
            :key="index"
            class="text-h6 font-weight-bold"
          ></component>
        </th>
      </tr>
    </thead>
    <tbody>
      <tr
        v-for="(row, rowIndex) in tableData?.length ? tableData : [itemTable?.TABLE_COLUMN]"
        :key="rowIndex"
      >
        <td
          v-for="(column, columnIndex) in itemTable?.TABLE_COLUMN"
          :key="columnIndex"
          v-bind="column?.directives"
          id="custom-row"
          :style="getCellStyle(row, columnIndex)"
        >
          <component
            :is="column.componentName"
            :item="{
              ...column,
              display: {
                label: getColumnValue(row, columnIndex, column?.display?.label),
              },
            }"
            :key="columnIndex"
          ></component>
        </td>
      </tr>
    </tbody>
  </v-table>
</template>

<script>
import CommonLabel from './CommonLabel.vue'

export default {
  name: 'CommonTable',
  components: {
    CommonLabel,
  },
  /**
   * @description
   * @object data:
   * - itemTable {object} - recipe of the table
   * - tableData {object||array} - datasets for the table
   */
  props: {
    itemTable: {
      type: Object,
    },
    tableData: {
      type: [Array, Object],
    },
  },
  methods: {
    /**
     * Get the column label
     * @param {string||number||array||object} row - data of each table row
     * @param {number} columnIndex - column index
     * @param {string} defaultLabel - default label for the column
     * @returns {string} column label
     */
    getColumnValue(row, columnIndex, defaultLabel) {
      if (row) {
        if (typeof row === 'string' || typeof row === 'number') {
          return row
        } else if (Array.isArray(row)) {
          row.map((index) => {
            return row[index] || defaultLabel
          })
        } else if (typeof row === 'object') {
          const keys = Object.keys(row)

          return this.getCellData(row, keys, columnIndex) || defaultLabel
        }
      }

      //Fallback to default label
      return defaultLabel
    },
    /**
     * Change the style of the table row or cell
     * @param {object} rowValue - data of the table row
     * @param {number} columnIndex - index of the data
     * @returns {object||null} style of the row or cell
     */
    getCellStyle(rowValue, columnIndex) {
      let i = 0
      for (let key in rowValue) {
        if (key === 'facility_cycle_time' && columnIndex === i) {
          return { background: parseFloat(rowValue.facility_cycle_time) > 2 ? 'red' : null }
        }
        i++
      }
    },
    /**
     * Returns cell data based on the condition given
     * @param {object} rows - table row data
     * @param {array} keys - keys of the row data
     * @param {number} index  - index of the data
     * @returns {string||number} the cell data
     */
    getCellData(rows, keys, index) {
      return keys[index] === 'facility_cycle_time' ? `${rows[keys[index]]}s` : rows[keys[index]]
    },
  },
}
</script>

<style scoped>
#custom-header {
  border-color: rgb(204, 204, 204);
  height: 2.6rem;
  text-align: center;
  font-weight: bolder;
}

#custom-row {
  border-color: rgb(204, 204, 204);
  height: 2.5rem;
  text-align: center;
  font-weight: bolder;
}

.custom-table {
  width: 100%;
  display: flex;
  flex-direction: column;
}
.custom-table th {
  border: 1px solid rgb(204, 204, 204);
  background-color: #2e2e2e;
  color: #ffffff;
}

.custom-table td {
  border: 1px solid rgb(204, 204, 204);
  background-color: #3a3a3a;
  color: #ffffff;
}

@media screen and (max-width: 1688px) {
  .custom-table {
    flex-direction: column;
    width: 400rem;
  }
}
</style>


// CommonLabel

<template>
  <label v-bind="item.directives">{{ item.display.label }}</label>
</template>

<script>
export default {
  name: 'CommonLabel',
  /**
   * @description
   * Receives object of data
   * * @object directives:
   * - directives {Object} - includes attributes of the component
   * - label {String} - text label of the component
   */
  props: {
    item: {
      type: Object,
      required: true,
    },
  },
}
</script>


// OperationStatusScreen

<template>
  <v-container fluid>
    <v-row>
      <v-col cols="12"
        ><common-header-table
          :last-process="operationStatusLabel"
          :style="determineBackgroundColor()"
        ></common-header-table>
      </v-col>
      <v-col class="ma-2">
        <canvas ref="myCanvas" width="416" height="700" class="canvas"></canvas>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import { FetchAPI } from '@/utility/apiRequest'
import { OPERATION_INFORMATION_TABLE } from '@/common/recipe/rTables'
import CommonHeaderTable from '@/components/common/CommonHeaderTable.vue'

export default {
  name: 'OperationStatusScreen',
  components: {
    CommonHeaderTable,
  },
  data() {
    return {
      TABLE_PROPERTIES: { ...OPERATION_INFORMATION_TABLE },
      imageUrl: null,
      rectangles: [],
      operation: null,
    }
  },
  mounted() {
    this.fetchImage()
  },
  computed: {
    /**
     * Get the last process and set the operation status label
     * @returns {string} the corresponding status label of the operation status
     */
    operationStatusLabel() {
      if (this.rectangles.length === 0) return ''

      const lastStatus = this.rectangles[this.rectangles.length - 1].operation_status
      this.operation = lastStatus
      switch (lastStatus) {
        case 1: // 稼働中 (In operation)
          return '稼働中'
        case 2: // 準備中 (Preparation)
          return '準備中'
        case 3: // 異常発生中 (Abnormal occurrence)
          return '異常発生中'
        default:
          return ''
      }
    },
  },
  methods: {
    /**
     * Function use for getting the image
     */
    async fetchImage() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/assets/images/line_chart.png', {
          responseType: 'blob',
        })
        this.imageUrl = URL.createObjectURL(response)
        this.createCanvas(this.imageUrl)
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Retrieves the operation process coordinates
     */
    async fetchProcessCoordinates() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-coordinates')
        this.rectangles = [...response.data]
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Create boxes with number label
     * @param {string} imageURL - image URL
     */
    async createCanvas(imageURL) {
      await this.fetchProcessCoordinates()
      const canvas = this.$refs.myCanvas
      const ctx = canvas.getContext('2d')
      const image = new Image()
      image.src = imageURL
      image.onload = () => {
        ctx.drawImage(image, 0, 0, canvas.width, canvas.height)

        this.rectangles.forEach((rect) => {
          const { statusColor, strokeColor } = this.determineColor(rect.operation_status)

          ctx.fillStyle = statusColor
          ctx.fillRect(rect.x, rect.y, rect.width, rect.height)
          ctx.strokeStyle = strokeColor
          ctx.lineWidth = 3
          ctx.strokeRect(rect.x, rect.y, rect.width, rect.height)
          const circleX = rect.x + rect.width / 2
          const circleY = rect.y + rect.height / 2
          this.drawCircleLabel(
            ctx,
            circleX,
            circleY,
            15,
            rect.process_id,
            'transparent',
            strokeColor,
          )
        })
      }
    },
    /**
     * Draws a circle and label for the canvas
     * @param ctx - canvas context
     * @param x - x coordinates
     * @param y - y coordinates
     * @param radius - radius value of the circle
     * @param label - the process id
     * @param fillStyle - fill color of the shape
     * @param strokeStyle - color of the stroke
     */
    drawCircleLabel(ctx, x, y, radius, label, fillStyle, strokeStyle) {
      ctx.beginPath()
      ctx.arc(x, y, radius, 0, Math.PI * 2)
      ctx.closePath()
      ctx.fillStyle = fillStyle
      ctx.fill()
      ctx.strokeStyle = strokeStyle
      ctx.stroke()
      ctx.font = 'bold 14px Arial'
      ctx.textAlign = 'center'
      ctx.textBaseline = 'middle'
      ctx.fillStyle = strokeStyle
      ctx.fillText(label, x, y)
    },
    /**
     * Determines the color of the operation based on the status value
     * @param {int} status - status value of the operation
     * @returns {object} status color and stroke color based on the status
     */
    determineColor(status) {
      let statusColor = ''
      let strokeColor = ''

      switch (status) {
        case 1: // 稼働中 In operation
          statusColor = 'green'
          strokeColor = 'white'
          break
        case 2: // 準備中 preparation
          statusColor = '#FFCA37'
          strokeColor = '#424242'
          break
        case 3: // 異常発生中 abnormal stop
          statusColor = 'red'
          strokeColor = 'white'
          break
        default:
          statusColor = 'grey'
          strokeColor = 'white'
      }
      return { statusColor: statusColor, strokeColor: strokeColor }
    },
    /**
     * Function for changing the background color of the operation status label
     * @returns {Object} the style of the labe based on the  operation status
     */
    determineBackgroundColor() {
      const color = {
        1: 'green',
        2: '#FFCA37',
        3: 'red',
      }

      const font = {
        2: 'black',
      }

      return {
        backgroundColor: color[this.operation] || 'gray',
        color: font[this.operation] || 'white',
      }
    },
  },
}
</script>
<style>
.custom-table th,
.custom-table td {
  border: 1px solid #ffffff;
  padding: 5px;
  font-size: 18px;
}

.custom-table th {
  font-size: 28px;
}

.lineChartImage {
  width: 26rem;
  max-width: 30rem;
}
</style>

// a_operation_information

from src.setup_db_example.models.m_operation_information import OperationInformationDb
from src.setup_db_example.schemas.s_operation_information import (
    OperationInformationSchema,
)
from src.setup_db_example.database import db
from flask import Blueprint, request

operation_information_router = Blueprint("a_operation_", __name__)
operation_information_schema = OperationInformationSchema


@operation_information_router.route("/api/get-coordinates", methods=["GET"])
def get_coordinates():
    """Fetch all the coordinates

    Returns:
        dict: return the api response
    """
    operation = OperationInformationDb
    process = (
        operation.query.filter(operation.process_id <= 14)
        .order_by(operation.process_id)
        .all()
    )

    operation_data = operation_information_schema(many=True).dump(process)

    coordinates_data= [{
        "process_id": item["process_id"],
        "operation_status":  item["operation_status"],
        "x": item["coordinates"]["x_position"],
        "y": item["coordinates"]["y_position"],
        "width": item["coordinates"]["width"],
        "height": item["coordinates"]["height"],
    }  for item in operation_data]

    return {
        "success": True,
        "message_response": "COORDINATES FETCHED SUCCESSFULLY",
        "message_content": "COORDINATES fetched successfully",
        "data": coordinates_data,
    }, 200


@operation_information_router.route("/api/get-all-operations", methods=["GET"])
def get_all_operations():
    """Fetch all the operations information

    Returns:
        dict: return the api response
    """
    operation = OperationInformationDb
    query = (
        operation.query.filter(operation.process_id <= 14)
        .order_by(operation.process_id)
        .all()
    )

    operation_data = operation_information_schema(many=True).dump(query)

    return {
        "success": True,
        "message_response": "OPERATIONS FETCHED SUCCESSFULLY",
        "message_content": "OPERATIONS fetched successfully",
        "data": operation_data,
    }, 200


@operation_information_router.route(
    "/api/update-units/<int:process_id>", methods=["PUT"]
)
def update_units(process_id):
    """Update the planned_number_units for a specific operation

    Returns:
        dict: return the api response

    """

    try:
        data = request.json.get("params")
        planned_number_units = data.get("planned_number_units")

        if planned_number_units is None:
            return {"success": False, "message": "Missing planned_number_units"}, 400

        operation = OperationInformationDb.query.filter_by(
            process_id=process_id
        ).first()

        if not operation:
            return {"success": False, "message": "Operation not found"}, 400

        operation.planned_number_units = planned_number_units
        db.session.commit()

        return {
            "success": True,
            "message": "PLANNED_NUMBER_UNITS UPDATED SUCCESSFULLY",
            "updated_value": planned_number_units,
        }, 200

    except Exception as e:
        return {"success": False, "message": f"Error updating units: {str(e)}"}, 500


// a_replenishment_notice

from src.setup_db_example.models.m_replenishment_notice import ReplenishmentDb
from src.setup_db_example.schemas.s_replenishment_notice import ReplenishmentSchema
from flask import Blueprint

replenishment_notice_router = Blueprint("a_replenishment_notice", __name__)
replenishment_notice_schema = ReplenishmentSchema


@replenishment_notice_router.route("/api/get-replenishment-notice", methods=["GET"])
def get_replenishment_notice():
    """Fetch replenishment notice

    Returns:
        dict: return the api response
    """

    query = (
        ReplenishmentDb.query.order_by(ReplenishmentDb.setup_date_time.asc())
        .limit(2)
        .all()
    )

    replenishment_notice_data = replenishment_notice_schema(many=True).dump(query)

    filtered_data = [
        {
            "process_name": item["operation_details"]["process_name"],
            "error_code": (item["abnormalities_content"]["error_code"]),
        }
        for item in replenishment_notice_data
    ]

    return {
        "success": True,
        "message_response": "REPLENISHMENT NOTICE FETCHED SUCCESSFULLY",
        "message_content": "REPLENISHMENT NOTICE fetched successfully",
        "data": filtered_data,
    }, 200


@replenishment_notice_router.route("/api/get-abnormalities", methods=["GET"])
def get_abnormalities():
    """Fetch abnormalities

    Returns:
        dict: return the api response
    """

    query = (
        ReplenishmentDb.query.order_by(ReplenishmentDb.setup_date_time.asc())
        .limit(14)
        .all()
    )

    abnormalities = replenishment_notice_schema(many=True).dump(query)
    
    abnormalities_data = [
        {
            "process_name": item["operation_details"]["process_name"],
            "error_code": item["abnormalities_content"]["error_code"],
            "error_message": item["abnormalities_content"]["error_message"],
        }
        for item in abnormalities
        if item["operation_details"]["operation_status"] == 3
    ]
    
    return {
        "success": True,
        "message_response": "ABNORMALITIES FETCHED SUCCESSFULLY",
        "message_content": "Abnormalities fetched successfully",
        "data": abnormalities_data,
    }, 200


// m_abnormalities

from src.setup_db_example.database import db


class AbnormalitiesDb(db.Model):
    """Represents a model for storing the data in abnormalities_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "abnormalities_tbl"
    abnormalities_id = db.Column(db.Integer, primary_key=True)
    error_code = db.Column(db.String(16), nullable=False)
    error_message = db.Column(db.String(255), nullable=False)

    replenishment_notice = db.relationship(
        "ReplenishmentDb", back_populates="abnormalities_content"
    )


// m_operation

from src.setup_db_example.database import db
from src.setup_db_example.models.m_replenishment_notice import ReplenishmentDb


class OperationInformationDb(db.Model):
    """Represents a model for storing the data in operation_information_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "operation_information_tbl"
    process_id = db.Column(db.Integer, primary_key=True)
    process_name = db.Column(db.String(128), nullable=False)
    operation_status = db.Column(db.Integer, nullable=False)
    product_number = db.Column(db.Integer, nullable=False)
    planned_number_units = db.Column(db.Integer, nullable=False)
    non_defective_products = db.Column(db.Integer, nullable=False)
    facility_cycle_time = db.Column(db.Float(3), nullable=False)
    coordinates_id = db.Column(
        db.Integer,
        db.ForeignKey("coordinates_tbl.coordinates_id"),
        nullable=False,
        unique=True,
    )
    coordinates = db.relationship(
        "CoordinatesDb", back_populates="operation_information"
    )

    replenishment = db.relationship(
        "ReplenishmentDb", back_populates="operation_details"
    )


// m_replenishment

from src.setup_db_example.database import db
from src.setup_db_example.models.m_abnormalities import AbnormalitiesDb


class ReplenishmentDb(db.Model):
    """Represents a model for storing the data in replenishment_notice_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "replenishment_notice_tbl"
    replenishment_id = db.Column(db.Integer, primary_key=True)
    setup_date_time = db.Column(db.DateTime, nullable=False)
    process_id = db.Column(
        db.Integer,
        db.ForeignKey("operation_information_tbl.process_id"),
        nullable=False,
    )

    abnormalities_id = db.Column(
        db.Integer,
        db.ForeignKey("abnormalities_tbl.abnormalities_id"),
        nullable=False,
    )

    operation_details = db.relationship(
        "OperationInformationDb", back_populates="replenishment"
    )

    abnormalities_content = db.relationship(
        AbnormalitiesDb, back_populates="replenishment_notice"
    )


//
