// a_operation_information

from src.setup_db_example.models.m_operation_information import OperationInformationDb
from src.setup_db_example.schemas.s_operation_information import (
    OperationInformationSchema,
)
from flask import Blueprint

operation_information_router = Blueprint("a_operation_", __name__)
operation_information_schema = OperationInformationSchema


@operation_information_router.route("/api/get-coordinates", methods=["GET"])
def get_coordinates():
    """Fetch all the coordinates

    Returns:
        dict: return the api response
    """
    operation = OperationInformationDb
    process = (
        operation.query.filter(operation.process_id <= 14)
        .order_by(operation.process_id)
        .all()
    )

    operation_data = []
    for data in process:
        operation_data_dict = {
            "process_id": data.process_id,
            "operation_status": data.operation_status,
            "x": data.coordinates.x_position,
            "y": data.coordinates.y_position,
            "width": data.coordinates.width,
            "height": data.coordinates.height,
        }
        operation_data.append(operation_data_dict)
    return {
        "success": True,
        "message_response": "COORDINATES FETCHED SUCCESSFULLY",
        "message_content": "COORDINATES fetched successfully",
        "data": operation_data,
    }, 200


@operation_information_router.route("/api/get-all-operations", methods=["GET"])
def get_all_operations():
    """Fetch all the operations information

    Returns:
        dict: return the api response
    """
    operation = OperationInformationDb
    query = (
        operation.query.filter(operation.process_id <= 14)
        .order_by(operation.process_id)
        .all()
    )

    operation_data = operation_information_schema(many=True).dump(query)

    return {
        "success": True,
        "message_response": "OPERATIONS FETCHED SUCCESSFULLY",
        "message_content": "OPERATIONS fetched successfully",
        "data": operation_data,
    }, 200


// a_reference_cycle

from src.setup_db_example.models.m_reference_cycle import ReferenceCycleDb
from src.setup_db_example.schemas.s_reference_cycle import ReferenceCycleSchema
from flask import Blueprint

reference_cycle_router = Blueprint("a_reference_cycle", __name__)
reference_cycle_schema = ReferenceCycleSchema


@reference_cycle_router.route("/api/get-ref-cycle-time", methods=["GET"])
def get_ref_cycle_time():
    """Fetch reference cycle time

    Returns:
        dict: return the api response
    """

    query = ReferenceCycleDb.query.all()

    reference_cycle_data = reference_cycle_schema(many=True).dump(query)

    return {
        "success": True,
        "message_response": "REFERENCED FETCHED SUCCESSFULLY",
        "message_content": "REFERENCED fetched successfully",
        "data": reference_cycle_data,
    }, 200


// m_operation_information

from src.setup_db_example.database import db


class OperationInformationDb(db.Model):
    """Represents a model for storing the data in operation_information_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "operation_information_tbl"
    process_id = db.Column(db.Integer, primary_key=True)
    process_name = db.Column(db.String(128), nullable=False)
    operation_status = db.Column(db.Integer, nullable=False)
    product_number = db.Column(db.Integer, nullable=False)
    planned_number_units = db.Column(db.Integer, nullable=False)
    facility_cycle_time = db.Column(db.Float(3), nullable=False)
    coordinates_id = db.Column(
        db.Integer,
        db.ForeignKey("coordinates_tbl.coordinates_id"),
        nullable=False,
        unique=True,
    )
    coordinates = db.relationship(
        "CoordinatesDb", back_populates="operation_information"
    )


// m_reference_cycle

from src.setup_db_example.database import db


class ReferenceCycleDb(db.Model):
    """Represents a model for storing the data in operation_information_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "reference_cycle_tbl"
    reference_id = db.Column(db.Integer, primary_key=True)
    reference_cycle_time = db.Column(db.Integer, nullable=False)


// s_operation

from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow
from src.setup_db_example.models.m_operation_information import OperationInformationDb
from src.setup_db_example.schemas.s_coordinates import CoordinatesSchema

ma = Marshmallow()


class OperationInformationSchema(SQLAlchemyAutoSchema):
    """
    This class positions schema with the corresponding db table model

    Args:
        SQLAlchemyAutoSchema (sqlalchemy): SQLAlchemy engine
    """

    class Meta:
        """Meta Class
        """    


        model = OperationInformationDb
        load_instance = True
        include_relationships = True

    ma.Nested(CoordinatesSchema)    


// s_reference_cycle
from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow
from src.setup_db_example.models.m_reference_cycle import ReferenceCycleDb

ma = Marshmallow()


class ReferenceCycleSchema(SQLAlchemyAutoSchema):
    """
    This class positions schema with the corresponding db table model

    Args:
        SQLAlchemyAutoSchema (sqlalchemy): SQLAlchemy engine
    """

    class Meta:
        """Meta Class"""

        model = ReferenceCycleDb
        load_instance = True


// database

from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.sql import text
from flask_migrate import Migrate, upgrade, init
from time import sleep
import os


# Create instances of SQLAlchemy and Migrate
db = SQLAlchemy()
migrate = Migrate()


def initialize_database(app):
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = True
    app.config["SQLALCHEMY_DATABASE_URI"] = os.getenv(
        "DATABASE_URL", "postgresql://postgres:postgres@db-nexus_app:5432/db_nexus_app"
    )
    app.config["DEBUG"] = True
    # app.config["SQLALCHEMY_BINDS"] = {"db2": "postgresql://postgres:postgres@db-nexus_app2:5432/db_nexus_app2"}

    db.init_app(app)
    migrate.init_app(app, db)

    # Import your models here so they are registered with SQLAlchemy
    from src.setup_db_example.models.m_coordinates import CoordinatesDb
    from src.setup_db_example.models.m_operation_information import (
        OperationInformationDb,
    )
    from src.setup_db_example.models.m_reference_cycle import ReferenceCycleDb

    sleep(2)  # wait for 2 seconds for the TCP to be initialized

    if not os.path.isdir("/usr/opt/nexus-app/backend/migrations"):
        init()
    print("Alembic Migration Initialized")
    __upgrade_database__(app)


def __upgrade_database__(app):
    with app.app_context():
        upgrade()
        print("Database upgraded successfully.")



// app

from flask import Flask
from flask_cors import CORS
from src.setup_db_example.database import initialize_database
from src.setup_db_example.api.a_image import image_router
from src.setup_db_example.api.a_operation_information import (
    operation_information_router,
)
from src.setup_db_example.api.a_reference_cycle import reference_cycle_router


def create_app():
    app = Flask(__name__)
    CORS(app)

    # Setup Database
    initialize_database(app)
    app.register_blueprint(image_router)
    app.register_blueprint(operation_information_router)
    app.register_blueprint(reference_cycle_router)
    return app


// __init__

from flask_admin import Admin
from flask_admin.contrib.sqla import ModelView

from src.setup_db_example.database import db

# NOTE: Import the Models
from src.setup_db_example.models.m_coordinates import CoordinatesDb
from src.setup_db_example.models.m_operation_information import OperationInformationDb
from src.setup_db_example.models.m_reference_cycle import ReferenceCycleDb


class ExportableModelView(ModelView):
    """Export対応ModelView"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.can_export = True


def admin_init(app):
    """flask-admin初期化

    Args:
        app (Flask): flaskアプリケーション
    """
    admin = Admin(app, url="/db-nexus_app/admin")

    admin.add_view(ExportableModelView(CoordinatesDb, db.session))
    admin.add_view(ExportableModelView(OperationInformationDb, db.session))
    admin.ad_view(ExportableModelView(ReferenceCycleDb, db.session))



// test_a_ref

from tests.setup_db_example.base import BaseTestCase
from src.setup_db_example.database import db
from src.setup_db_example.models.m_reference_cycle import ReferenceCycleDb


class TestReferenceCycleApi(BaseTestCase):
    """Class for testing the a_reference_cycle

    Args:
        BaseTestCase (class): base module class
    """

    def test_a_reference_cycle(self):
        """Test if the reference cycle is successfully fetch"""

        mock_reference_cycle = ReferenceCycleDb(reference_cycle_time=2)

        db.session.add(mock_reference_cycle)
        db.session.commit()
        get_response = self.client.get("/api/get-ref-cycle-time")

        data = get_response.get_json()
        assert data["message_response"] == "REFERENCED FETCHED SUCCESSFULLY"
        assert get_response.status_code == 200


// test_operation

from tests.setup_db_example.base import BaseTestCase
from src.setup_db_example.database import db
from src.setup_db_example.models.m_coordinates import CoordinatesDb
from src.setup_db_example.models.m_operation_information import OperationInformationDb


class TestOperationInformationApi(BaseTestCase):
    """Class for testing the a_operation_information

    Args:
        BaseTestCase (class): base module class
    """

    def test_get_coordinates(self):
        """Test if the coordinates is successfully fetch"""
        mock_coordinates = CoordinatesDb(
            x_position=65, y_position=515, width=70, height=40
        )
        mock_operation_information = OperationInformationDb(
            process_name="部品供給機",
            operation_status=1,
            planned_number_units=24,
            product_number=2,
            facility_cycle_time=2,
            coordinates_id=1,
        )
        db.session.add(mock_coordinates)
        db.session.add(mock_operation_information)
        db.session.commit()
        get_response = self.client.get("/api/get-coordinates")

        data = get_response.get_json()
        assert data["message_response"] == "COORDINATES FETCHED SUCCESSFULLY"
        assert get_response.status_code == 200

    def test_get_all_operations(self):
        """Test if the operations are successfully fetch"""

        mock_coordinates = CoordinatesDb(
            x_position=65, y_position=515, width=70, height=40
        )
        mock_operation_information = OperationInformationDb(
            process_name="部品供給機",
            operation_status=1,
            planned_number_units=24,
            product_number=2,
            facility_cycle_time=2,
            coordinates_id=1,
        )
        db.session.add(mock_coordinates)
        db.session.add(mock_operation_information)
        db.session.commit()
        get_response = self.client.get("/api/get-all-operations")

        data = get_response.get_json()
        assert data["message_response"] == "OPERATIONS FETCHED SUCCESSFULLY"
        assert get_response.status_code == 200




/////////////////////

// ProcessInformationScreen

<template>
  <v-container fluid>
    <v-row>
      <v-col><ProductionLine /></v-col>
    </v-row>
  </v-container>
</template>

<script>
import ProductionLine from '@/components/pages/ProcessInformationScreen/ProductionLine.vue'
import { FetchAPI } from '@/utility/apiRequest'

export default {
  name: 'ProcessInformationScreen',
  components: {
    ProductionLine,
  },
  data() {
    return {
      reference_CT: 0,
      operation_information: [],
    }
  },
  methods: {
    /**
     * Fetch all operation information
     */
    async fetchAllOperations() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-all-operations')

        this.operation_information = [...response.data]
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Fetch reference cycle time
     */
    async fetchReferenceCT() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-ref-cycle-time')

        this.reference_CT = [...response.data]
      } catch (error) {
        console.log(error)
      }
    },
  },
}
</script>
<style scoped></style>


// ProductionLine

<template>
  <v-container fluid>
    <v-row class="ProductLineHeader"><common-label :item="productionLineTitle" /></v-row>
    <v-row><common-table :item-table="TABLE_PROPERTIES"></common-table></v-row>
  </v-container>
</template>

<script>
import { PRODUCTION_LINE_LABEL } from '@/common/recipe/rLabels'
import { PROUDUCT_LINE_TABLE } from '@/common/recipe/rTables'
import CommonLabel from '@/components/common/CommonLabel.vue'
import CommonTable from '@/components/common/CommonTable.vue'

export default {
  name: 'ProcessLine',
  components: {
    CommonLabel,
    CommonTable,
  },
  data() {
    return {
      TABLE_PROPERTIES: { ...PROUDUCT_LINE_TABLE },
      productionLineTitle: PRODUCTION_LINE_LABEL,
    }
  },
}
</script>
<style scoped>
.ProductLineHeader {
  margin-bottom: 1rem;
}
</style>
