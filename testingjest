from src.setup_db_example.models.m_operation_information import OperationInformationDb
from src.setup_db_example.schemas.s_operation_information import OperationInformationSchema
from src.setup_db_example.database import db
from flask import Blueprint, request

operation_information_router = Blueprint("a_operation_", __name__)
operation_information_schema = OperationInformationSchema



@operation_information_router.route("/api/get-coordinates", methods=["GET"])
def get_coordinates():
    """Fetch all the coordinates

    Returns:
        dict: return the api response
    """
    operation = OperationInformationDb
    process = (
        operation.query.filter(operation.process_id <= 14)
        .order_by(operation.process_id)
        .all()
    )

    operation_data = []
    for data in process:
        operation_data_dict = {
            "process_id": data.process_id,
            "operation_status": data.operation_status,
            "x": data.coordinates.x_position,
            "y": data.coordinates.y_position,
            "width": data.coordinates.width,
            "height": data.coordinates.height,
        }
        operation_data.append(operation_data_dict)
    return {
        "success": True,
        "message_response": "COORDINATES FETCHED SUCCESSFULLY",
        "message_content": "COORDINATES fetched successfully",
        "data": operation_data,
    }, 200


@operation_information_router.route("/api/get-all-operations", methods=["GET"])
def get_all_operations():
    """Fetch all the operations information

    Returns:
        dict: return the api response
    """
    operation = OperationInformationDb
    query = (
        operation.query.filter(operation.process_id <= 14)
        .order_by(operation.process_id)
        .all()
    )

    operation_data = operation_information_schema(many=True).dump(query)

    return {
        "success": True,
        "message_response": "OPERATIONS FETCHED SUCCESSFULLY",
        "message_content": "OPERATIONS fetched successfully",
        "data": operation_data,
    }, 200


@operation_information_router.route(
    "/api/update-units/<int:process_id>", methods=["PUT"]
)
def update_units(process_id):
    """Update the planned_number_units for a specific operation"""

    try:
        data = request.json.get("params")
        planned_number_units = data.get("planned_number_units")

        if planned_number_units is None:
            return {"success": False, "message": "Missing planned_number_units"}, 400

        operation = OperationInformationDb.query.filter_by(
            process_id=process_id
        ).first()

        if not operation:
            return {"success": False, "message": "Operation not found"}, 400

        operation.planned_number_units = planned_number_units
        db.session.commit()

        return {
            "success": True,
            "message": "PLANNED_NUMBER_UNITS UPDATED SUCCESSFULLY",
            "updated_value": planned_number_units,
        }, 200

    except Exception as e:
        return {"success": False, "message": f"Error updating units: {str(e)}"}, 500

--------------------------------

from tests.setup_db_example.base import BaseTestCase
from src.setup_db_example.database import db
from src.setup_db_example.models.m_coordinates import CoordinatesDb
from src.setup_db_example.models.m_operation_information import OperationInformationDb


class TestOperationInformationApi(BaseTestCase):
    """Class for testing the a_operation_information

    Args:
        BaseTestCase (class): base module class
    """

    def test_get_coordinates(self):
        """Test if the coordinates is successfully fetch"""
        mock_coordinates = CoordinatesDb(
            x_position=65, y_position=515, width=70, height=40
        )
        mock_operation_information = OperationInformationDb(
            process_name="部品供給機",
            operation_status=1,
            planned_number_units=24,
            product_number=2,
            facility_cycle_time=2,
            coordinates_id=1,
        )
        db.session.add(mock_coordinates)
        db.session.add(mock_operation_information)
        db.session.commit()
        get_response = self.client.get("/api/get-coordinates")

        data = get_response.get_json()
        assert data["message_response"] == "COORDINATES FETCHED SUCCESSFULLY"
        assert get_response.status_code == 200

    def test_get_all_operations(self):
        """Test if the operations are successfully fetch"""

        mock_coordinates = CoordinatesDb(
            x_position=65, y_position=515, width=70, height=40
        )
        mock_operation_information = OperationInformationDb(
            process_name="部品供給機",
            operation_status=1,
            planned_number_units=24,
            product_number=2,
            facility_cycle_time=2,
            coordinates_id=1,
        )
        db.session.add(mock_coordinates)
        db.session.add(mock_operation_information)
        db.session.commit()
        get_response = self.client.get("/api/get-all-operations")

        data = get_response.get_json()
        assert data["message_response"] == "OPERATIONS FETCHED SUCCESSFULLY"
        assert get_response.status_code == 200
