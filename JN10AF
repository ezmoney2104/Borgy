<template>
  <v-container class="container" fluid>
    <v-row class="ProductLineHeader"> <common-label :item="ErrorInformationTitle" /> </v-row>

    <v-row>
      <v-col class="error-screen">
        <v-list
          v-for="(item, index) in abnormalities"
          :key="item.id"
          :style="{ transform: getTransform(index) }"
          :class="{ 'zoomed-item': currentZoomedIndex === index }"
          class="zoom-item"
          style="background-color: cadetblue; margin: 0; padding: 5px"
        >
          <v-list-item-title
            class="v-list-item-title"
            style="background-color: royalblue; margin: 0; padding: 0"
            ><span>
              <span class="replenish-number">{{ index + 1 }} </span> {{ item.process_name }}
              {{ item.error_code }} {{ item.error_message }}</span
            ></v-list-item-title
          >
        </v-list>
      </v-col></v-row
    ></v-container
  >
</template>

<script>
import CommonLabel from '@/components/common/CommonLabel.vue'
import { ERROR_INFORMATION_LABEL } from '@/common/recipe/rLabels'
import { ref, onMounted, onBeforeUnmount } from 'vue'
export default {
  name: 'ErrorInformation',
  components: {
    CommonLabel,
  },
  data() {
    return {
      ErrorInformationTitle: ERROR_INFORMATION_LABEL,
    }
  },
  /**
   * @description
   * Recieves data from different components
   * @array data:
   * - abnormalities {array} - array of objects of the operations
   */
  props: {
    abnormalities: {
      type: Array,
      required: true,
    },
  },
  setup() {
    const items = ref([])

    const currentZoomedIndex = ref(-1)
    const isAnimating = ref(true)
    let animationTimeout = null
    let pauseTimeout = null

    const getTransform = (index) => {
      return currentZoomedIndex.value === index ? 'scale(1.2)' : 'scale(1)'
    }

    const animateItem = (index) => {
      if (!isAnimating.value) return

      currentZoomedIndex.value = index
      const item = items.value[index]

      animationTimeout = setTimeout(() => {
        currentZoomedIndex.value = -1

        // Move to the next item
        const nextIndex = (index + 1) % items.value.length

        // Set pause duration based on the index
        const pauseDuration = nextIndex % 7 === 0 ? 7000 : 500

        pauseTimeout = setTimeout(() => {
          animateItem(nextIndex)
        }, pauseDuration)
      }, 500)
    }

    const handleResize = () => {
      if (window.innerWidth >= 768) {
        isAnimating.value = false
        clearTimeout(animationTimeout)
        clearTimeout(pauseTimeout)
        currentZoomedIndex.value = -1
      } else {
        isAnimating.value = true
        animateItem(0)
      }
    }

    const debounce = (func, delay) => {
      let timeout
      return (...args) => {
        clearTimeout(timeout)
        timeout = setTimeout(() => func.apply(this, args), delay)
      }
    }

    const debouncedHandleResize = debounce(handleResize, 200)

    onMounted(() => {
      window.addEventListener('resize', debouncedHandleResize)
      if (window.innerWidth < 768) animateItem(0)
    })

    onBeforeUnmount(() => {
      window.removeEventListener('resize', debouncedHandleResize)
      clearTimeout(animationTimeout)
      clearTimeout(pauseTimeout)
    })

    return {
      items,
      currentZoomedIndex,
      getTransform,
    }
  },
}
</script>

<style scoped>
.replenish-number {
  border: 0.125rem solid red;
  border-radius: 50%;
  padding: 0.2rem;
  text-align: center;
  font-size: 0.8rem;
  font-weight: 700;
  display: inline-block;
  width: 3.9ch;
  aspect-ratio: 1 / 1;
}

.error-screen {
  height: 530px;
  background-color: #616161;
  padding: 10px;
}
</style>
